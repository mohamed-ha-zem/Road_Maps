import { Code, TestTube, Rocket, Box, Blocks, FileCode, Workflow, Database, Server, Bug } from "lucide-react";
import React from "react";
import Questions from "../Components/questions";

const quizData = [
  {
    title: "Dart",
    icon: <FileCode className="w-5 h-5 text-blue-400" />,
    questions: [
      {
        question: "ما الذي يميز تحليل الأنواع الثابتة (static type analysis) في Dart؟",
        options: [
          "يُحسن الأداء عبر تحويل الكود إلى bytecode.",
          "يُقلل أخطاء وقت التشغيل من خلال التحقق من الأنواع أثناء التطوير.",
          "يُتيح إنشاء واجهات مستخدم ديناميكية باستخدام widgets.",
          "يُدير العمليات غير المتزامنة تلقائيًا باستخدام async."
        ],
        answer: "يُقلل أخطاء وقت التشغيل من خلال التحقق من الأنواع أثناء التطوير."
      },
      {
        question: "كيف يُعالج Dart مشكلة null safety في المتغيرات؟",
        options: [
          "يُجبر المبرمج على تعيين قيم افتراضية للمتغيرات.",
          "يستخدم نوعًا خاصًا (Nullable) للسماح بالقيم الفارغة بأمان.",
          "يُلغي استخدام المتغيرات غير المُعرفة نهائيًا.",
          "يُعتمد على garbage collector لإدارة القيم الفارغة."
        ],
        answer: "يستخدم نوعًا خاصًا (Nullable) للسماح بالقيم الفارغة بأمان."
      },
      {
        question: "ما الفرق بين async* وasync في Dart؟",
        options: [
          "async* تُستخدم لإرجاع Stream، بينما async تُرجع Future.",
          "async تُستخدم لإرجاع Stream، بينما async* تُرجع Future.",
          "async* تُدار تلقائيًا بواسطة garbage collector، بينما async يدويًا.",
          "async تُستخدم للدوال التزامنية، بينما async* لغير المتزامنة."
        ],
        answer: "async* تُستخدم لإرجاع Stream، بينما async تُرجع Future."
      },
      {
        question: "كيف تُحقق Dart الوراثة (inheritance) في البرمجة الكائنية؟",
        options: [
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية implements لتعريف الكائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات."
        ],
        answer: "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية late في Dart؟",
        options: [
          "تُؤخر تهيئة المتغير حتى يتم استخدامه لأول مرة.",
          "تُجبر المتغير على أن يكون ثابتًا (const).",
          "تُتيح استخدام المتغير في دوال غير متزامنة فقط.",
          "تُلغي فحص null safety للمتغير."
        ],
        answer: "تُؤخر تهيئة المتغير حتى يتم استخدامه لأول مرة."
      },
      {
        question: "كيف تُستخدم المجموعات الديناميكية (dynamic collections) في Dart؟",
        options: [
          "باستخدام List<dynamic> لتخزين أنواع بيانات متنوعة.",
          "باستخدام Map<static> لتخزين بيانات ثابتة فقط.",
          "باستخدام Set<fixed> لضمان عدم التكرار.",
          "باستخدام List<final> لتخزين قيم غير قابلة للتعديل."
        ],
        answer: "باستخدام List<dynamic> لتخزين أنواع بيانات متنوعة."
      },
      {
        question: "ما دور الكلمة المفتاحية mixin في Dart؟",
        options: [
          "تُتيح إعادة استخدام الكود عبر إضافته إلى فئات متعددة.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ثابتة (static objects)."
        ],
        answer: "تُتيح إعادة استخدام الكود عبر إضافته إلى فئات متعددة."
      },
      {
        question: "كيف يُمكن معالجة الأخطاء في العمليات غير المتزامنة في Dart؟",
        options: [
          "باستخدام try-catch مع async/await.",
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات."
        ],
        answer: "باستخدام try-catch مع async/await."
      },
      {
        question: "ما الفرق بين List وSet في Dart؟",
        options: [
          "List تسمح بالتكرار، بينما Set لا تسمح بالتكرار.",
          "Set تسمح بالتكرار، بينما List لا تسمح بالتكرار.",
          "List تُستخدم للبيانات غير القابلة للتعديل، بينما Set قابلة للتعديل.",
          "Set تُستخدم للبيانات الثابتة، بينما List ديناميكية."
        ],
        answer: "List تسمح بالتكرار، بينما Set لا تسمح بالتكرار."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية const في Dart؟",
        options: [
          "تُنشئ كائنات ثابتة لا يمكن تغييرها وقت التشغيل.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُجبر الكائنات على أن تكون ديناميكية.",
          "تُتيح تعديل الكائنات في الدوال غير المتزامنة."
        ],
        answer: "تُنشئ كائنات ثابتة لا يمكن تغييرها وقت التشغيل."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية factory في Dart؟",
        options: [
          "تُنشئ مثيلات مخصصة لفئة بناءً على شروط معينة.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ثابتة (static objects)."
        ],
        answer: "تُنشئ مثيلات مخصصة لفئة بناءً على شروط معينة."
      },
      {
        question: "كيف يُمكن تحسين أداء تطبيق Dart؟",
        options: [
          "بتقليل استخدام dynamic واستخدام أنواع ثابتة.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام null safety.",
          "بإلغاء البرمجة الكائنية."
        ],
        answer: "بتقليل استخدام dynamic واستخدام أنواع ثابتة."
      },
      {
        question: "ما الفرق بين Future وStream في Dart؟",
        options: [
          "Future تُرجع قيمة واحدة، بينما Stream تُرجع سلسلة قيم.",
          "Stream تُرجع قيمة واحدة، بينما Future تُرجع سلسلة قيم.",
          "Future تُستخدم للبيانات الثابتة، بينما Stream ديناميكية.",
          "Stream تُستخدم للعمليات المتزامنة، بينما Future غير متزامنة."
        ],
        answer: "Future تُرجع قيمة واحدة، بينما Stream تُرجع سلسلة قيم."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية typedef في Dart؟",
        options: [
          "تُعرف أنواعًا مخصصة للدوال أو الهياكل.",
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للفئة.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُعرف أنواعًا مخصصة للدوال أو الهياكل."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية cascade (..) في Dart؟",
        options: [
          "تُتيح تنفيذ عدة عمليات على كائن واحد بشكل متسلسل.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُتيح تنفيذ عدة عمليات على كائن واحد بشكل متسلسل."
      },
      {
        question: "كيف يُمكن إنشاء مكتبة (library) في Dart؟",
        options: [
          "باستخدام الكلمة المفتاحية library في ملف Dart.",
          "باستخدام الكلمة المفتاحية package في ملف YAML.",
          "باستخدام الكلمة المفتاحية module في ملف JSON.",
          "باستخدام الكلمة المفتاحية export في ملف HTML."
        ],
        answer: "باستخدام الكلمة المفتاحية library في ملف Dart."
      },
      {
        question: "ما الفرق بين var وdynamic في Dart؟",
        options: [
          "var يُحدد النوع عند التهيئة، بينما dynamic يسمح بتغيير النوع.",
          "dynamic يُحدد النوع عند التهيئة، بينما var يسمح بتغيير النوع.",
          "var يُستخدم للعمليات المتزامنة، بينما dynamic لغير المتزامنة.",
          "dynamic يُنشئ كائنات ثابتة، بينما var ديناميكية."
        ],
        answer: "var يُحدد النوع عند التهيئة، بينما dynamic يسمح بتغيير النوع."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية extension في Dart؟",
        options: [
          "تُضيف وظائف إضافية إلى فئات موجودة دون تعديلها.",
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للفئة.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُضيف وظائف إضافية إلى فئات موجودة دون تعديلها."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية sealed في Dart؟",
        options: [
          "تُحدد فئة مغلقة تُستخدم مع pattern matching.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُحدد فئة مغلقة تُستخدم مع pattern matching."
      },
      {
        question: "كيف يُمكن تحسين إدارة الذاكرة في تطبيقات Dart؟",
        options: [
          "بتقليل استخدام الكائنات الديناميكية وزيادة الأنواع الثابتة.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام null safety.",
          "بإلغاء البرمجة الكائنية."
        ],
        answer: "بتقليل استخدام الكائنات الديناميكية وزيادة الأنواع الثابتة."
      }
    ]
  },
  {
    title: "Kotlin",
    icon: <FileCode className="w-5 h-5 text-purple-400" />,
    questions: [
      {
        question: "ما الذي يميز coroutines في Kotlin؟",
        options: [
          "تُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "تُتيح تنفيذ العمليات غير المتزامنة بطريقة شبه تزامنية.",
          "تُستخدم لإنشاء واجهات مستخدم ديناميكية.",
          "تُدير قواعد البيانات العلائقية."
        ],
        answer: "تُتيح تنفيذ العمليات غير المتزامنة بطريقة شبه تزامنية."
      },
      {
        question: "كيف تُعالج Kotlin مشكلة null safety؟",
        options: [
          "باستخدام نوع Nullable (مثل T?) والتحقق من القيم.",
          "بإلغاء استخدام المتغيرات غير المُعرفة نهائيًا.",
          "بإجبار المبرمج على تعيين قيم افتراضية.",
          "بتعتمد على garbage collector لإدارة القيم."
        ],
        answer: "باستخدام نوع Nullable (مثل T?) والتحقق من القيم."
      },
      {
        question: "ما الفرق بين suspend وinline في Kotlin؟",
        options: [
          "suspend تُستخدم للدوال غير المتزامنة، بينما inline تُحسن الأداء.",
          "inline تُستخدم للدوال غير المتزامنة، بينما suspend تُحسن الأداء.",
          "suspend تُنشئ كائنات ثابتة، بينما inline ديناميكية.",
          "inline تُستخدم للعمليات المتزامنة، بينما suspend لغير المتزامنة."
        ],
        answer: "suspend تُستخدم للدوال غير المتزامنة، بينما inline تُحسن الأداء."
      },
      {
        question: "كيف تُحقق Kotlin البرمجة الوظيفية؟",
        options: [
          "باستخدام lambda expressions ودوال من الدرجة الأولى.",
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات."
        ],
        answer: "باستخدام lambda expressions ودوال من الدرجة الأولى."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية lateinit في Kotlin؟",
        options: [
          "تُؤخر تهيئة المتغيرات غير القابلة للتعيين كـ null.",
          "تُجبر المتغير على أن يكون ثابتًا (const).",
          "تُتيح استخدام المتغير في دوال متزامنة فقط.",
          "تُلغي فحص null safety للمتغير."
        ],
        answer: "تُؤخر تهيئة المتغيرات غير القابلة للتعيين كـ null."
      },
      {
        question: "كيف تُستخدم المجموعات في Kotlin؟",
        options: [
          "باستخدام listOf وmapOf لإنشاء قوائم وخرائط.",
          "باستخدام setOf لتخزين بيانات ثابتة فقط.",
          "باستخدام arrayOf لضمان التكرار.",
          "باستخدام mutableListOf لتخزين قيم غير قابلة للتعديل."
        ],
        answer: "باستخدام listOf وmapOf لإنشاء قوائم وخرائط."
      },
      {
        question: "ما دور الكلمة المفتاحية sealed في Kotlin؟",
        options: [
          "تُحدد فئة مغلقة تُستخدم مع when للتحقق من الحالات.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ثابتة (static objects)."
        ],
        answer: "تُحدد فئة مغلقة تُستخدم مع when للتحقق من الحالات."
      },
      {
        question: "كيف يُمكن معالجة الأخطاء في coroutines في Kotlin؟",
        options: [
          "باستخدام try-catch داخل CoroutineScope.",
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات."
        ],
        answer: "باستخدام try-catch داخل CoroutineScope."
      },
      {
        question: "ما الفرق بين List وMutableList في Kotlin؟",
        options: [
          "List غير قابلة للتعديل، بينما MutableList قابلة للتعديل.",
          "MutableList غير قابلة للتعديل، بينما List قابلة للتعديل.",
          "List تُستخدم للبيانات غير القابلة للتكرار، بينما MutableList للتكرار.",
          "MutableList تُستخدم للبيانات الثابتة، بينما List ديناميكية."
        ],
        answer: "List غير قابلة للتعديل، بينما MutableList قابلة للتعديل."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية const في Kotlin؟",
        options: [
          "تُنشئ قيم ثابتة تُعرف وقت الترجمة.",
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال غير المتزامنة."
        ],
        answer: "تُنشئ قيم ثابتة تُعرف وقت الترجمة."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية object في Kotlin؟",
        options: [
          "تُنشئ كائنًا فرديًا (singleton) لفئة معينة.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية."
        ],
        answer: "تُنشئ كائنًا فرديًا (singleton) لفئة معينة."
      },
      {
        question: "كيف يُمكن تحسين أداء تطبيق Kotlin؟",
        options: [
          "بتقليل استخدام reflection وزيادة الأنواع الثابتة.",
          "بزيادة استخدام coroutines في العمليات المتزامنة.",
          "بتقليل استخدام null safety.",
          "بإلغاء البرمجة الوظيفية."
        ],
        answer: "بتقليل استخدام reflection وزيادة الأنواع الثابتة."
      },
      {
        question: "ما الفرق بين Flow وChannel في Kotlin؟",
        options: [
          "Flow تُرجع سلسلة قيم باردة، بينما Channel ساخنة.",
          "Channel تُرجع سلسلة قيم باردة، بينما Flow ساخنة.",
          "Flow تُستخدم للبيانات الثابتة، بينما Channel ديناميكية.",
          "Channel تُستخدم للعمليات المتزامنة، بينما Flow غير متزامنة."
        ],
        answer: "Flow تُرجع سلسلة قيم باردة، بينما Channel ساخنة."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية typealias في Kotlin؟",
        options: [
          "تُعرف أسماء بديلة لأنواع معقدة.",
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للفئة.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُعرف أسماء بديلة لأنواع معقدة."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية by في Kotlin؟",
        options: [
          "تُفوض تنفيذ واجهة إلى كائن آخر (delegation).",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُفوض تنفيذ واجهة إلى كائن آخر (delegation)."
      },
      {
        question: "كيف يُمكن إنشاء مكتبة (library) في Kotlin؟",
        options: [
          "باستخدام ملف build.gradle مع إعدادات مكتبة.",
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف YAML مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام ملف build.gradle مع إعدادات مكتبة."
      },
      {
        question: "ما الفرق بين val وvar في Kotlin؟",
        options: [
          "val للقيم غير القابلة للتعديل، بينما var قابلة للتعديل.",
          "var للقيم غير القابلة للتعديل، بينما val قابلة للتعديل.",
          "val تُستخدم للعمليات المتزامنة، بينما var لغير المتزامنة.",
          "var تُنشئ كائنات ثابتة، بينما val ديناميكية."
        ],
        answer: "val للقيم غير القابلة للتعديل، بينما var قابلة للتعديل."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية companion في Kotlin؟",
        options: [
          "تُنشئ كائنًا ثابتًا داخل فئة للوصول إلى أعضائها.",
          "تُنشئ كائنات ديناميكية داخل الفئة.",
          "تُحدد واجهة (interface) للفئة.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُنشئ كائنًا ثابتًا داخل فئة للوصول إلى أعضائها."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية reified في Kotlin؟",
        options: [
          "تُتيح الوصول إلى نوع عام (generic) وقت التشغيل.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُتيح الوصول إلى نوع عام (generic) وقت التشغيل."
      },
      {
        question: "كيف يُمكن تحسين إدارة الذاكرة في تطبيقات Kotlin؟",
        options: [
          "بتقليل استخدام الكائنات المؤقتة وزيادة الأنواع الثابتة.",
          "بزيادة استخدام coroutines في العمليات المتزامنة.",
          "بتقليل استخدام null safety.",
          "بإلغاء البرمجة الوظيفية."
        ],
        answer: "بتقليل استخدام الكائنات المؤقتة وزيادة الأنواع الثابتة."
      }
    ]
  },
  {
    title: "Swift",
    icon: <FileCode className="w-5 h-5 text-orange-400" />,
    questions: [
      {
        question: "ما الذي يميز ميزة optionals في Swift؟",
        options: [
          "تُتيح إدارة القيم الفارغة بأمان باستخدام ? و!.",
          "تُوفر إدارة تلقائية للذاكرة مثل garbage collector.",
          "تُستخدم لإنشاء واجهات مستخدم ديناميكية.",
          "تُدير قواعد البيانات العلائقية."
        ],
        answer: "تُتيح إدارة القيم الفارغة بأمان باستخدام ? و!."
      },
      {
        question: "كيف تُعالج Swift العمليات غير المتزامنة؟",
        options: [
          "باستخدام async/await مع دوال معلّمة بـ async.",
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "باستخدام async/await مع دوال معلّمة بـ async."
      },
      {
        question: "ما الفرق بين protocol وextension في Swift؟",
        options: [
          "protocol يُعرف سلوكًا، بينما extension يُضيف وظائف لأنواع موجودة.",
          "extension يُعرف سلوكًا، بينما protocol يُضيف وظائف لأنواع موجودة.",
          "protocol يُنشئ كائنات ثابتة، بينما extension ديناميكية.",
          "extension تُستخدم للعمليات المتزامنة، بينما protocol لغير المتزامنة."
        ],
        answer: "protocol يُعرف سلوكًا، بينما extension يُضيف وظائف لأنواع موجودة."
      },
      {
        question: "كيف تُحقق Swift إدارة الذاكرة؟",
        options: [
          "باستخدام Automatic Reference Counting (ARC).",
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات."
        ],
        answer: "باستخدام Automatic Reference Counting (ARC)."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية defer في Swift؟",
        options: [
          "تُؤخر تنفيذ كود حتى نهاية النطاق (scope).",
          "تُجبر المتغير على أن يكون ثابتًا (const).",
          "تُتيح استخدام المتغير في دوال متزامنة فقط.",
          "تُلغي فحص optionals للمتغير."
        ],
        answer: "تُؤخر تنفيذ كود حتى نهاية النطاق (scope)."
      },
      {
        question: "كيف تُستخدم المجموعات في Swift؟",
        options: [
          "باستخدام Array وDictionary لإنشاء قوائم وخرائط.",
          "باستخدام Set لتخزين بيانات ثابتة فقط.",
          "باستخدام Tuple لضمان التكرار.",
          "باستخدام Array لتخزين قيم غير قابلة للتعديل."
        ],
        answer: "باستخدام Array وDictionary لإنشاء قوائم وخرائط."
      },
      {
        question: "ما دور الكلمة المفتاحية enum في Swift؟",
        options: [
          "تُحدد مجموعة من القيم المرتبطة مع دعم القيم الخام.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ثابتة (static objects)."
        ],
        answer: "تُحدد مجموعة من القيم المرتبطة مع دعم القيم الخام."
      },
      {
        question: "كيف يُمكن معالجة الأخطاء في Swift؟",
        options: [
          "باستخدام try-catch مع do-catch blocks.",
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات."
        ],
        answer: "باستخدام try-catch مع do-catch blocks."
      },
      {
        question: "ما الفرق بين struct وclass في Swift؟",
        options: [
          "struct تُمرر بالقيمة، بينما class تُمرر بالمرجع.",
          "class تُمرر بالقيمة، بينما struct تُمرر بالمرجع.",
          "struct تُستخدم للبيانات غير القابلة للتكرار، بينما class للتكرار.",
          "class تُستخدم للبيانات الثابتة، بينما struct ديناميكية."
        ],
        answer: "struct تُمرر بالقيمة، بينما class تُمرر بالمرجع."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية static في Swift؟",
        options: [
          "تُنشئ خصائص ودوال ثابتة مرتبطة بالنوع نفسه.",
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال غير المتزامنة."
        ],
        answer: "تُنشئ خصائص ودوال ثابتة مرتبطة بالنوع نفسه."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية actor في Swift؟",
        options: [
          "تُوفر نوعًا آمنًا للتعامل مع التزامن (concurrency).",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية."
        ],
        answer: "تُوفر نوعًا آمنًا للتعامل مع التزامن (concurrency)."
      },
      {
        question: "كيف يُمكن تحسين أداء تطبيق Swift؟",
        options: [
          "بتقليل استخدام force-unwrap وزيادة الأنواع الآمنة.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام optionals.",
          "بإلغاء البرمجة الكائنية."
        ],
        answer: "بتقليل استخدام force-unwrap وزيادة الأنواع الآمنة."
      },
      {
        question: "ما الفرق بين Result وthrows في Swift؟",
        options: [
          "Result تُرجع نجاحًا أو فشلاً، بينما throws تُطلق استثناء.",
          "throws تُرجع نجاحًا أو فشلاً، بينما Result تُطلق استثناء.",
          "Result تُستخدم للبيانات الثابتة، بينما throws ديناميكية.",
          "throws تُستخدم للعمليات المتزامنة، بينما Result غير متزامنة."
        ],
        answer: "Result تُرجع نجاحًا أو فشلاً، بينما throws تُطلق استثناء."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية typealias في Swift؟",
        options: [
          "تُعرف أسماء بديلة لأنواع معقدة أو موجودة.",
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للفئة.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُعرف أسماء بديلة لأنواع معقدة أو موجودة."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية where في Swift؟",
        options: [
          "تُضيف شروطًا إضافية للأنواع العامة أو البروتوكولات.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص optionals للكائن."
        ],
        answer: "تُضيف شروطًا إضافية للأنواع العامة أو البروتوكولات."
      },
      {
        question: "كيف يُمكن إنشاء مكتبة (library) في Swift؟",
        options: [
          "باستخدام Xcode مع إعدادات framework أو module.",
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف YAML مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام Xcode مع إعدادات framework أو module."
      },
      {
        question: "ما الفرق بين let وvar في Swift؟",
        options: [
          "let للقيم غير القابلة للتعديل، بينما var قابلة للتعديل.",
          "var للقيم غير القابلة للتعديل، بينما let قابلة للتعديل.",
          "let تُستخدم للعمليات المتزامنة، بينما var لغير المتزامنة.",
          "var تُنشئ كائنات ثابتة، بينما let ديناميكية."
        ],
        answer: "let للقيم غير القابلة للتعديل، بينما var قابلة للتعديل."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية associatedtype في Swift؟",
        options: [
          "تُحدد نوعًا عامًا داخل بروتوكول.",
          "تُنشئ كائنات ديناميكية داخل الفئة.",
          "تُحدد واجهة (interface) للفئة.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُحدد نوعًا عامًا داخل بروتوكول."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية opaque في Swift؟",
        options: [
          "تُرجع نوعًا غير محدد مع ضمان توافق البروتوكول.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص optionals للكائن."
        ],
        answer: "تُرجع نوعًا غير محدد مع ضمان توافق البروتوكول."
      },
      {
        question: "كيف يُمكن تحسين إدارة الذاكرة في تطبيقات Swift؟",
        options: [
          "بتقليل الاحتفاظ الدوري (retain cycles) باستخدام weak/unowned.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام optionals.",
          "بإلغاء البرمجة الكائنية."
        ],
        answer: "بتقليل الاحتفاظ الدوري (retain cycles) باستخدام weak/unowned."
      }
    ]
  },
  {
    title: "Flutter",
    icon: <Blocks className="w-5 h-5 text-blue-300" />,
    questions: [
      {
        question: "ما الذي يميز نظام الـ widgets في Flutter؟",
        options: [
          "يُتيح بناء واجهات مستخدم هرمية قابلة للتخصيص.",
          "يُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "يُستخدم لإدارة قواعد البيانات العلائقية.",
          "يُدير العمليات غير المتزامنة تلقائيًا."
        ],
        answer: "يُتيح بناء واجهات مستخدم هرمية قابلة للتخصيص."
      },
      {
        question: "كيف تُدار الحالة (state) في Flutter؟",
        options: [
          "باستخدام Provider، Riverpod، أو Bloc لإدارة الحالة العامة.",
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "باستخدام Provider، Riverpod، أو Bloc لإدارة الحالة العامة."
      },
      {
        question: "ما الفرق بين StatelessWidget وStatefulWidget في Flutter؟",
        options: [
          "StatelessWidget ثابتة، بينما StatefulWidget ديناميكية.",
          "StatefulWidget ثابتة، بينما StatelessWidget ديناميكية.",
          "StatelessWidget تُستخدم للبيانات القابلة للتعديل، بينما StatefulWidget ثابتة.",
          "StatefulWidget تُستخدم للبيانات الثابتة، بينما StatelessWidget ديناميكية."
        ],
        answer: "StatelessWidget ثابتة، بينما StatefulWidget ديناميكية."
      },
      {
        question: "كيف تُحقق Flutter التنقل بين الشاشات؟",
        options: [
          "باستخدام Navigator مع push وpop.",
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات."
        ],
        answer: "باستخدام Navigator مع push وpop."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية Key في Flutter؟",
        options: [
          "تُحدد هوية فريدة لـ widget للحفاظ على الحالة.",
          "تُجبر الـ widget على أن تكون ثابتة (const).",
          "تُتيح استخدام الـ widget في دوال متزامنة فقط.",
          "تُلغي فحص null safety للـ widget."
        ],
        answer: "تُحدد هوية فريدة لـ widget للحفاظ على الحالة."
      },
      {
        question: "كيف تُستخدم المكتبات الخارجية في Flutter؟",
        options: [
          "باستخدام ملف pubspec.yaml لإضافة التبعيات.",
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف build.gradle مع إعدادات مكتبة.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام ملف pubspec.yaml لإضافة التبعيات."
      },
      {
        question: "ما دور الكلمة المفتاحية const في بناء widgets في Flutter؟",
        options: [
          "تُحسن الأداء بإنشاء widgets ثابتة وقت الترجمة.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للـ widget.",
          "تُنشئ كائنات ديناميكية."
        ],
        answer: "تُحسن الأداء بإنشاء widgets ثابتة وقت الترجمة."
      },
      {
        question: "كيف يُمكن معالجة الأخطاء في طلبات API في Flutter؟",
        options: [
          "باستخدام try-catch مع مكتبات مثل Dio أو http.",
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات."
        ],
        answer: "باستخدام try-catch مع مكتبات مثل Dio أو http."
      },
      {
        question: "ما الفرق بين MaterialApp وCupertinoApp في Flutter؟",
        options: [
          "MaterialApp تتبع تصميم Android، بينما CupertinoApp تتبع iOS.",
          "CupertinoApp تتبع تصميم Android، بينما MaterialApp تتبع iOS.",
          "MaterialApp تُستخدم للبيانات القابلة للتعديل، بينما CupertinoApp ثابتة.",
          "CupertinoApp تُستخدم للبيانات الثابتة، بينما MaterialApp ديناميكية."
        ],
        answer: "MaterialApp تتبع تصميم Android، بينما CupertinoApp تتبع iOS."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية async في Flutter؟",
        options: [
          "تُتيح تنفيذ دوال غير متزامنة مع await.",
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة."
        ],
        answer: "تُتيح تنفيذ دوال غير متزامنة مع await."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية InheritedWidget في Flutter؟",
        options: [
          "تُتيح مشاركة البيانات عبر شجرة الـ widgets.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للـ widget.",
          "تُنشئ كائنات ديناميكية."
        ],
        answer: "تُتيح مشاركة البيانات عبر شجرة الـ widgets."
      },
      {
        question: "كيف يُمكن تحسين أداء تطبيق Flutter؟",
        options: [
          "بتقليل إعادة بناء الـ widgets باستخدام const وKeys.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام null safety.",
          "بإلغاء إدارة الحالة."
        ],
        answer: "بتقليل إعادة بناء الـ widgets باستخدام const وKeys."
      },
      {
        question: "ما الفرق بين pushNamed وpush في Navigator في Flutter؟",
        options: [
          "pushNamed يستخدم اسم المسار، بينما push يستخدم widget مباشرة.",
          "push يستخدم اسم المسار، بينما pushNamed يستخدم widget مباشرة.",
          "pushNamed يُستخدم للبيانات الثابتة، بينما push ديناميكي.",
          "push يُستخدم للعمليات المتزامنة، بينما pushNamed غير متزامن."
        ],
        answer: "pushNamed يستخدم اسم المسار، بينما push يستخدم widget مباشرة."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية ValueNotifier في Flutter؟",
        options: [
          "تُوفر إشعارات عند تغيير قيمة معينة.",
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للـ widget.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُوفر إشعارات عند تغيير قيمة معينة."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية BuildContext في Flutter؟",
        options: [
          "يُوفر معلومات عن موقع الـ widget في شجرة الـ widgets.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "يُوفر معلومات عن موقع الـ widget في شجرة الـ widgets."
      },
      {
        question: "كيف يُمكن إنشاء package في Flutter؟",
        options: [
          "باستخدام أمر flutter create --template=package.",
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف build.gradle مع إعدادات مكتبة.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام أمر flutter create --template=package."
      },
      {
        question: "ما الفرق بين setState وProvider في Flutter؟",
        options: [
          "setState يُحدث واجهة محلية، بينما Provider يُدير حالة عامة.",
          "Provider يُحدث واجهة محلية، بينما setState يُدير حالة عامة.",
          "setState يُستخدم للبيانات الثابتة، بينما Provider ديناميكي.",
          "Provider يُستخدم للعمليات المتزامنة، بينما setState غير متزامن."
        ],
        answer: "setState يُحدث واجهة محلية، بينما Provider يُدير حالة عامة."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية StreamBuilder في Flutter؟",
        options: [
          "تُبني واجهة بناءً على تدفق بيانات (Stream).",
          "تُنشئ كائنات ديناميكية داخل الفئة.",
          "تُحدد واجهة (interface) للـ widget.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُبني واجهة بناءً على تدفق بيانات (Stream)."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية didChangeDependencies في Flutter؟",
        options: [
          "تُستدعى عند تغيير تبعيات الـ widget الموروثة.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُستدعى عند تغيير تبعيات الـ widget الموروثة."
      },
      {
        question: "كيف يُمكن تحسين إدارة الموارد في تطبيقات Flutter؟",
        options: [
          "بتقليل إعادة بناء الـ widgets واستخدام المكتبات المحسنة.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام null safety.",
          "بإلغاء إدارة الحالة."
        ],
        answer: "بتقليل إعادة بناء الـ widgets واستخدام المكتبات المحسنة."
      }
    ]
  },
  {
    title: "React Native",
    icon: <Blocks className="w-5 h-5 text-teal-300" />,
    questions: [
      {
        question: "ما الذي يميز مكونات React في React Native؟",
        options: [
          "تُتيح بناء واجهات مستخدم ديناميكية باستخدام JavaScript.",
          "تُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "تُستخدم لإدارة قواعد البيانات العلائقية.",
          "تُدير العمليات غير المتزامنة تلقائيًا."
        ],
        answer: "تُتيح بناء واجهات مستخدم ديناميكية باستخدام JavaScript."
      },
      {
        question: "كيف تُدار الحالة في React Native؟",
        options: [
          "باستخدام Redux، Context API، أو Zustand.",
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "باستخدام Redux، Context API، أو Zustand."
      },
      {
        question: "ما الفرق بين useState وuseReducer في React Native؟",
        options: [
          "useState للحالات البسيطة، بينما useReducer للحالات المعقدة.",
          "useReducer للحالات البسيطة، بينما useState للحالات المعقدة.",
          "useState تُستخدم للبيانات القابلة للتعديل، بينما useReducer ثابتة.",
          "useReducer تُستخدم للبيانات الثابتة، بينما useState ديناميكية."
        ],
        answer: "useState للحالات البسيطة، بينما useReducer للحالات المعقدة."
      },
      {
        question: "كيف تُحقق React Native التنقل بين الشاشات؟",
        options: [
          "باستخدام React Navigation مع navigators مثل Stack.",
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات."
        ],
        answer: "باستخدام React Navigation مع navigators مثل Stack."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية useEffect في React Native؟",
        options: [
          "تُدير تأثيرات جانبية مثل جلب البيانات أو الاشتراكات.",
          "تُجبر المكون على أن يكون ثابتًا (const).",
          "تُتيح استخدام المكون في دوال متزامنة فقط.",
          "تُلغي فحص null safety للمكون."
        ],
        answer: "تُدير تأثيرات جانبية مثل جلب البيانات أو الاشتراكات."
      },
      {
        question: "كيف تُستخدم المكتبات الخارجية في React Native؟",
        options: [
          "باستخدام ملف package.json مع npm أو yarn.",
          "باستخدام ملف pubspec.yaml لإضافة التبعيات.",
          "باستخدام ملف build.gradle مع إعدادات مكتبة.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام ملف package.json مع npm أو yarn."
      },
      {
        question: "ما دور الكلمة المفتاحية memo في React Native؟",
        options: [
          "يُمنع إعادة تصيير مكون إذا لم تتغير خصائصه.",
          "يُجبر الفئة على أن تكون مجردة (abstract).",
          "يُحدد واجهة (interface) للمكون.",
          "يُنشئ كائنات ديناميكية."
        ],
        answer: "يُمنع إعادة تصيير مكون إذا لم تتغير خصائصه."
      },
      {
        question: "كيف يُمكن معالجة الأخطاء في طلبات API في React Native؟",
        options: [
          "باستخدام try-catch مع مكتبات مثل axios أو fetch.",
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات."
        ],
        answer: "باستخدام try-catch مع مكتبات مثل axios أو fetch."
      },
      {
        question: "ما الفرق بين View وScrollView في React Native؟",
        options: [
          "View لعرض مكونات ثابتة، بينما ScrollView للمحتوى القابل للتمرير.",
          "ScrollView لعرض مكونات ثابتة، بينما View للمحتوى القابل للتمرير.",
          "View تُستخدم للبيانات القابلة للتعديل، بينما ScrollView ثابتة.",
          "ScrollView تُستخدم للبيانات الثابتة، بينما View ديناميكية."
        ],
        answer: "View لعرض مكونات ثابتة، بينما ScrollView للمحتوى القابل للتمرير."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية useCallback في React Native؟",
        options: [
          "تُحافظ على دالة ثابتة لمنع إعادة إنشائها.",
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة."
        ],
        answer: "تُحافظ على دالة ثابتة لمنع إعادة إنشائها."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية useMemo في React Native؟",
        options: [
          "تُحافظ على قيم محسوبة لمنع إعادة الحساب.",
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للمكون.",
          "تُنشئ كائنات ديناميكية."
        ],
        answer: "تُحافظ على قيم محسوبة لمنع إعادة الحساب."
      },
      {
        question: "كيف يُمكن تحسين أداء تطبيق React Native؟",
        options: [
          "بتقليل إعادة التصيير باستخدام memo وuseCallback.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام Redux.",
          "بإلغاء إدارة الحالة."
        ],
        answer: "بتقليل إعادة التصيير باستخدام memo وuseCallback."
      },
      {
        question: "ما الفرق بين StackNavigator وTabNavigator في React Navigation؟",
        options: [
          "StackNavigator يُدير شاشات مكدسة، بينما TabNavigator يُدير علامات تبويب.",
          "TabNavigator يُدير شاشات مكدسة، بينما StackNavigator يُدير علامات تبويب.",
          "StackNavigator يُستخدم للبيانات الثابتة، بينما TabNavigator ديناميكي.",
          "TabNavigator يُستخدم للعمليات المتزامنة، بينما StackNavigator غير متزامن."
        ],
        answer: "StackNavigator يُدير شاشات مكدسة، بينما TabNavigator يُدير علامات تبويب."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية useRef في React Native؟",
        options: [
          "تُنشئ مرجعًا دائمًا لقيمة أو عنصر DOM.",
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للمكون.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُنشئ مرجعًا دائمًا لقيمة أو عنصر DOM."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية FlatList في React Native؟",
        options: [
          "تُعرض قوائم طويلة بكفاءة مع إعادة تدوير العناصر.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُعرض قوائم طويلة بكفاءة مع إعادة تدوير العناصر."
      },
      {
        question: "كيف يُمكن إنشاء مكون أصلي (native module) في React Native؟",
        options: [
          "باستخدام Objective-C/Swift لـ iOS وJava/Kotlin لـ Android.",
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام Objective-C/Swift لـ iOS وJava/Kotlin لـ Android."
      },
      {
        question: "ما الفرق بين useContext وRedux في React Native؟",
        options: [
          "useContext للحالات المحلية، بينما Redux للحالات العامة المعقدة.",
          "Redux للحالات المحلية، بينما useContext للحالات العامة المعقدة.",
          "useContext يُستخدم للبيانات الثابتة، بينما Redux ديناميكي.",
          "Redux يُستخدم للعمليات المتزامنة، بينما useContext غير متزامن."
        ],
        answer: "useContext للحالات المحلية، بينما Redux للحالات العامة المعقدة."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية SectionList في React Native؟",
        options: [
          "تُعرض قوائم مقسمة إلى أقسام مع عناوين.",
          "تُنشئ كائنات ديناميكية داخل الفئة.",
          "تُحدد واجهة (interface) للمكون.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُعرض قوائم مقسمة إلى أقسام مع عناوين."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية useNavigation في React Native؟",
        options: [
          "تُتيح الوصول إلى كائن التنقل في مكون وظيفي.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُتيح الوصول إلى كائن التنقل في مكون وظيفي."
      },
      {
        question: "كيف يُمكن تحسين إدارة الموارد في تطبيقات React Native؟",
        options: [
          "بتقليل إعادة التصيير واستخدام مكونات محسنة مثل FlatList.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام Redux.",
          "بإلغاء إدارة الحالة."
        ],
        answer: "بتقليل إعادة التصيير واستخدام مكونات محسنة مثل FlatList."
      }
    ]
  },
  {
    title: "Native Android (Kotlin)",
    icon: <Blocks className="w-5 h-5 text-green-400" />,
    questions: [
      {
        question: "ما الذي يميز Jetpack Compose في تطوير Android؟",
        options: [
          "يُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "يُستخدم لإدارة قواعد البيانات العلائقية.",
          "يُتيح بناء واجهات مستخدم ديناميكية باستخدام Kotlin.",
          "يُدير العمليات غير المتزامنة تلقائيًا."
        ],
        answer: "يُتيح بناء واجهات مستخدم ديناميكية باستخدام Kotlin."
      },
      {
        question: "كيف تُدار الحالة في Jetpack Compose؟",
        options: [
          "باستخدام حلقات for التقليدية.",
          "باستخدام State وMutableState مع recomposition.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "باستخدام State وMutableState مع recomposition."
      },
      {
        question: "ما الفرق بين ViewModel وLiveData في Android؟",
        options: [
          "ViewModel يُدير البيانات، بينما LiveData يُراقب التغييرات.",
          "LiveData يُدير البيانات، بينما ViewModel يُراقب التغييرات.",
          "ViewModel تُستخدم للبيانات القابلة للتعديل، بينما LiveData ثابتة.",
          "LiveData تُستخدم للبيانات الثابتة، بينما ViewModel ديناميكية."
        ],
        answer: "ViewModel يُدير البيانات، بينما LiveData يُراقب التغييرات."
      },
      {
        question: "كيف تُحقق Android التنقل بين الشاشات؟",
        options: [
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات.",
          "باستخدام Navigation Component مع NavGraph."
        ],
        answer: "باستخدام Navigation Component مع NavGraph."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية @Composable في Jetpack Compose؟",
        options: [
          "تُجبر الدالة على أن تكون ثابتة (const).",
          "تُتيح استخدام الدالة في دوال متزامنة فقط.",
          "تُلغي فحص null safety للدالة.",
          "تُشير إلى دالة يمكنها بناء واجهة مستخدم."
        ],
        answer: "تُشير إلى دالة يمكنها بناء واجهة مستخدم."
      },
      {
        question: "كيف تُستخدم المكتبات الخارج alfية في Android؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف build.gradle مع إضافة التبعيات.",
          "باستخدام ملف HTMLWITH Sheldon إعدادات export."
        ],
        answer: "باستخدام ملف build.gradle مع إضافة التبعيات."
      },
      {
        question: "ما دور الكلمة المفتاحية @Inject في Android؟",
        options: [
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية.",
          "تُستخدم مع Dagger لتزويد التبعيات تلقائيًا.",
          "تُجبر الفئة على أن تكون مجردة (abstract)."
        ],
        answer: "تُستخدم مع Dagger لتزويد التبعيات تلقائيًا."
      },
      {
        question: "كيف يُمكن معالجة الأخطاء في طلبات API في Android؟",
        options: [
          "باستخدام try-catch مع مكتبات مثل Retrofit أو OkHttp.",
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات."
        ],
        answer: "باستخدام try-catch مع مكتبات مثل Retrofit أو OkHttp."
      },
      {
        question: "ما الفرق بين Activity وFragment في Android؟",
        options: [
          "Fragment تمثل شاشة كاملة، بينما Activity جزء من واجهة.",
          "Activity تُستخدم للبيانات القابلة للتعديل، بينما Fragment ثابتة.",
          "Activity تمثل شاشة كاملة، بينما Fragment جزء من واجهة.",
          "Fragment تُستخدم للبيانات الثابتة، بينما Activity ديناميكية."
        ],
        answer: "Activity تمثل شاشة كاملة، بينما Fragment جزء من واجهة."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية Flow في Android؟",
        options: [
          "تُؤخر تهيئة القيم حتى وقت الاستخدام NPM.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة.",
          "تُرجع سلسلة قيم باردة لمعالجة البيانات."
        ],
        answer: "تُرجع سلسلة قيم باردة لمعالجة البيانات."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية WorkManager في Android؟",
        options: [
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُدير المهام الخلفية المجدولة بكفاءة.",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية."
        ],
        answer: "تُدير المهام الخلفية المجدولة بكفاءة."
      },
      {
        question: "كيف يُمكن تحسين أداء تطبيق Android باستخدام Jetpack؟",
        options: [
          "بتقليل استخدام ViewModel وLiveData.",
          "بزيادة استخدام coroutines في العمليات المتزامنة.",
          "بتقليل إعادة التصيير باستخدام Compose وState.",
          "بإلغاء البرمجة الوظيفية."
        ],
        answer: "بتقليل إعادة التصيير باستخدام Compose وState."
      },
      {
        question: "ما الفرق بين CoroutineScope وGlobalScope في Kotlin؟",
        options: [
          "CoroutineScope يرتبط بدورة حياة، بينما GlobalScope عام.",
          "GlobalScope يرتبط بدورة حياة، بينما CoroutineScope عام.",
          "CoroutineScope تُستخدم للبيانات الثابتة، بينما GlobalScope ديناميكية.",
          "GlobalScope تُستخدم للعمليات المتزامنة، بينما CoroutineScope غير متزامنة."
        ],
        answer: "CoroutineScope يرتبط بدورة حياة، بينما GlobalScope عام."
      },
      {
        question: "كيف تُستخدم مكتبة Room في Android؟",
        options: [
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للفئة.",
          "تُوفر قاعدة بيانات محلية باستخدام ORM.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُوفر قاعدة بيانات محلية باستخدام ORM."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية @Entity في Room؟",
        options: [
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن.",
          "تُحدد فئة كجدول في قاعدة البيانات."
        ],
        answer: "تُحدد فئة كجدول في قاعدة البيانات."
      },
      {
        question: "كيف يُمكن إدارة التبعيات في Android؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "باستخدام Dagger أو Hilt للحقن."
        ],
        answer: "باستخدام Dagger أو Hilt للحقن."
      },
      {
        question: "ما الفرق بين @Dao و@Entity في Room؟",
        options: [
          "Dao للواجهات، بينما Entity للجدول.",
          "Entity للواجهات، بينما Dao للجدول.",
          "Dao تُستخدم للبيانات الثابتة، بينما Entity ديناميكية.",
          "Entity تُستخدم للعمليات المتزامنة، بينما Dao غير متزامنة."
        ],
        answer: "Dao للواجهات، بينما Entity للجدول."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية @Query في Room؟",
        options: [
          "تُنشئ كائنات ديناميكية داخل الفئة.",
          "تُحدد استعلامات SQL في واجهة Dao.",
          "تُحدد واجهة (interface) للفئة.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُحدد استعلامات SQL في واجهة Dao."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية ViewBinding في Android؟",
        options: [
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُوفر وصولاً آمنًا إلى عناصر الواجهة.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن."
        ],
        answer: "تُوفر وصولاً آمنًا إلى عناصر الواجهة."
      },
      {
        question: "كيف يُمكن تحسين إدارة الذاكرة في Android؟",
        options: [
          "بزيادة استخدام coroutines في العمليات المتزامنة.",
          "بتقليل استخدام Room.",
          "بإلغاء البرمجة الوظيفية.",
          "بتقليل الكائنات المؤقتة واستخدام ViewModel."
        ],
        answer: "بتقليل الكائنات المؤقتة واستخدام ViewModel."
      }
    ]
  },
  {
    title: "Native iOS (Swift)",
    icon: <Blocks className="w-5 h-5 text-orange-300" />,
    questions: [
      {
        question: "ما الذي يميز SwiftUI في تطوير iOS؟",
        options: [
          "يُوفر إدارة تلقائية للذاكرة مثل garbage collector.",
          "يُستخدم لإدارة قواعد البيانات العلائقية.",
          "يُتيح بناء واجهات مستخدم ديناميكية باستخدام Swift.",
          "يُدير العمليات غير المتزامنة تلقائيًا."
        ],
        answer: "يُتيح بناء واجهات مستخدم ديناميكية باستخدام Swift."
      },
      {
        question: "كيف تُدار الحالة في SwiftUI؟",
        options: [
          "باستخدام حلقات for التقليدية.",
          "باستخدام @State و@ObservedObject.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "باستخدام @State و@ObservedObject."
      },
      {
        question: "ما الفرق بين @State و@Binding في SwiftUI؟",
        options: [
          "State يُدير الحالة محليًا، بينما Binding يربط بقيمة خارجية.",
          "Binding يُدير الحالة محليًا، بينما State يربط بقيمة خارجية.",
          "State تُستخدم للبيانات القابلة للتعديل، بينما Binding ثابتة.",
          "Binding تُستخدم للبيانات الثابتة، بينما State ديناميكية."
        ],
        answer: "State يُدير الحالة محليًا، بينما Binding يربط بقيمة خارجية."
      },
      {
        question: "كيف تُحقق SwiftUI التنقل بين الشاشات؟",
        options: [
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام NavigationStack وNavigationLink.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات."
        ],
        answer: "باستخدام NavigationStack وNavigationLink."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية @ViewBuilder في SwiftUI؟",
        options: [
          "تُجبر الدالة على أن تكون ثابتة (const).",
          "تُتيح استخدام الدالة في دوال متزامنة فقط.",
          "تُلغي فحص null safety للدالة.",
          "تُتيح بناء واجهات مستخدم متعددة داخل دالة."
        ],
        answer: "تُتيح بناء واجهات مستخدم متعددة داخل دالة."
      },
      {
        question: "كيف تُستخدم المكتبات الخارجية في SwiftUI؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام Swift Package Manager أو CocoaPods.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام Swift Package Manager أو CocoaPods."
      },
      {
        question: "ما دور الكلمة المفتاحية @Environment في SwiftUI؟",
        options: [
          "تُحدد واجهة (interface) للعرض.",
          "تُنشئ كائنات ديناميكية.",
          "تُتيح الوصول إلى بيانات البيئة مثل theme.",
          "تُجبر العرض على أن يكون مجردًا (abstract)."
        ],
        answer: "تُتيح الوصول إلى بيانات البيئة مثل theme."
      },
      {
        question: "كيف يُمكن معالجة الأخطاء في طلبات API في SwiftUI؟",
        options: [
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام try-catch مع URLSession.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات."
        ],
        answer: "باستخدام try-catch مع URLSession."
      },
      {
        question: "ما الفرق بين UIViewController وSwiftUI View؟",
        options: [
          "UIViewController للتحكم الكامل، بينما View للعرض فقط.",
          "View للتحكم الكامل، بينما UIViewController للعرض فقط.",
          "UIViewController تُستخدم للبيانات القابلة للتعديل، بينما View ثابتة.",
          "View تُستخدم للبيانات الثابتة، بينما UIViewController ديناميكية."
        ],
        answer: "UIViewController للتحكم الكامل، بينما View للعرض فقط."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية @Published في SwiftUI؟",
        options: [
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة.",
          "تُرسل إشعارات عند تغيير خاصية."
        ],
        answer: "تُرسل إشعارات عند تغيير خاصية."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية @StateObject في SwiftUI؟",
        options: [
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للعرض.",
          "تُنشئ كائنًا مراقبًا يرتبط بدورة حياة العرض.",
          "تُنشئ كائنات ديناميكية."
        ],
        answer: "تُنشئ كائنًا مراقبًا يرتبط بدورة حياة العرض."
      },
      {
        question: "كيف يُمكن تحسين أداء تطبيق SwiftUI؟",
        options: [
          "بتقليل استخدام @State و@Binding.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل إعادة التصيير باستخدام @StateObject.",
          "بإلغاء البرمجة الوظيفية."
        ],
        answer: "بتقليل إعادة التصيير باستخدام @StateObject."
      },
      {
        question: "ما الفرق بين NavigationStack وNavigationLink في SwiftUI؟",
        options: [
          "NavigationStack يُدير التنقل، بينما NavigationLink يفتح شاشة.",
          "NavigationLink يُدير التنقل، بينما NavigationStack يفتح شاشة.",
          "NavigationStack تُستخدم للبيانات الثابتة، بينما NavigationLink ديناميكية.",
          "NavigationLink تُستخدم للعمليات المتزامنة، بينما NavigationStack غير متزامنة."
        ],
        answer: "NavigationStack يُدير التنقل، بينما NavigationLink يفتح شاشة."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية @EnvironmentObject في SwiftUI؟",
        options: [
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للعرض.",
          "تُتيح مشاركة كائن عبر شجرة العروض.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُتيح مشاركة كائن عبر شجرة العروض."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية onAppear في SwiftUI؟",
        options: [
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن.",
          "تُنفذ كودًا عند ظهور العرض."
        ],
        answer: "تُنفذ كودًا عند ظهور العرض."
      },
      {
        question: "كيف يُمكن إنشاء مكتبة في Swift؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "باستخدام Swift Package Manager."
        ],
        answer: "باستخدام Swift Package Manager."
      },
      {
        question: "ما الفرق بين @ObservedObject و@StateObject في SwiftUI؟",
        options: [
          "ObservedObject لا يملك دورة الحياة، بينما StateObject يملكها.",
          "StateObject لا يملك دورة الحياة، بينما ObservedObject يملكها.",
          "ObservedObject تُستخدم للبيانات الثابتة، بينما StateObject ديناميكية.",
          "StateObject تُستخدم للعمليات المتزامنة، بينما ObservedObject غير متزامنة."
        ],
        answer: "ObservedObject لا يملك دورة الحياة، بينما StateObject يملكها."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية @GestureState في SwiftUI؟",
        options: [
          "تُنشئ كائنات ديناميكية داخل العرض.",
          "تُحدد واجهة (interface) للعرض.",
          "تُدير حالة الإيماءات مثل السحب أو النقر.",
          "تُجبر الفئة على أن تكون مجردة."
        ],
        answer: "تُدير حالة الإيماءات مثل السحب أو النقر."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية sheet في SwiftUI؟",
        options: [
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن.",
          "تُعرض عرضًا مؤقتًا (modal view)."
        ],
        answer: "تُعرض عرضًا مؤقتًا (modal view)."
      },
      {
        question: "كيف يُمكن تحسين إدارة الذاكرة في SwiftUI؟",
        options: [
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام @State.",
          "بإلغاء البرمجة الوظيفية.",
          "بتقليل الاحتفاظ الدوري باستخدام weak."
        ],
        answer: "بتقليل الاحتفاظ الدوري باستخدام weak."
      }
    ]
  },
  {
    title: "State Management",
    icon: <Workflow className="w-5 h-5 text-purple-400" />,
    questions: [
      {
        question: "ما الذي يميز Redux في إدارة الحالة؟",
        options: [
          "يُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "يُستخدم لإدارة قواعد البيانات العلائقية.",
          "يُدير الحالة العامة باستخدام مخزن مركزي.",
          "يُدير العمليات غير المتزامنة تلقائيًا."
        ],
        answer: "يُدير الحالة العامة باستخدام مخزن مركزي."
      },
      {
        question: "كيف يعمل نمط Provider في Flutter؟",
        options: [
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "بتوفير البيانات عبر شجرة الـ widgets.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "بتوفير البيانات عبر شجرة الـ widgets."
      },
      {
        question: "ما الفرق بين Bloc وRedux؟",
        options: [
          "Bloc يعتمد على التدفقات، بينما Redux على الـ actions.",
          "Redux يعتمد على التدفقات، بينما Bloc على الـ actions.",
          "Bloc تُستخدم للبيانات القابلة للتعديل، بينما Redux ثابتة.",
          "Redux تُستخدم للبيانات الثابتة، بينما Bloc ديناميكية."
        ],
        answer: "Bloc يعتمد على التدفقات، بينما Redux على الـ actions."
      },
      {
        question: "كيف يُحقق Riverpod تحسينات على Provider؟",
        options: [
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات.",
          "يُلغي الحاجة إلى InheritedWidget."
        ],
        answer: "يُلغي الحاجة إلى InheritedWidget."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية useReducer في React؟",
        options: [
          "تُجبر الحالة على أن تكون ثابتة (const).",
          "تُتيح استخدام الحالة في دوال متزامنة فقط.",
          "تُلغي فحص null safety للحالة.",
          "تُدير حالة معقدة باستخدام reducer."
        ],
        answer: "تُدير حالة معقدة باستخدام reducer."
      },
      {
        question: "كيف يُستخدم MobX في إدارة الحالة؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام observable وreactions.",
          "باستخدام ملف HTML مع إعدادات export."
        ],
        answer: "باستخدام observable وreactions."
      },
      {
        question: "ما دور الكلمة المفتاحية @Observable في SwiftUI؟",
        options: [
          "تُحدد واجهة (interface) للحالة.",
          "تُنشئ كائنات ديناميكية.",
          "تُتيح مراقبة التغييرات في الكائنات.",
          "تُجبر الفئة على أن تكون مجردة (abstract)."
        ],
        answer: "تُتيح مراقبة التغييرات في الكائنات."
      },
      {
        question: "كيف يُمكن معالجة الحالة في تطبيقات Android؟",
        options: [
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات.",
          "باستخدام ViewModel مع LiveData أو StateFlow."
        ],
        answer: "باستخدام ViewModel مع LiveData أو StateFlow."
      },
      {
        question: "ما الفرق بين Context API وRedux في React؟",
        options: [
          "Context API محلي، بينما Redux عام ومركزي.",
          "Redux محلي، بينما Context API عام ومركزي.",
          "Context API تُستخدم للبيانات القابلة للتعديل، بينما Redux ثابتة.",
          "Redux تُستخدم للبيانات الثابتة، بينما Context API ديناميكية."
        ],
        answer: "Context API محلي، بينما Redux عام ومركزي."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية Flow في Kotlin؟",
        options: [
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة.",
          "تُوفر تدفق بيانات لإدارة الحالة."
        ],
        answer: "تُوفر تدفق بيانات لإدارة الحالة."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية @Published في Combine؟",
        options: [
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية.",
          "تُرسل إشعارات عند تغيير خاصية."
        ],
        answer: "تُرسل إشعارات عند تغيير خاصية."
      },
      {
        question: "كيف يُمكن تحسين إدارة الحالة في Flutter؟",
        options: [
          "بتقليل استخدام Redux وBloc.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "باستخدام Riverpod مع تحسينات الأداء.",
          "بإلغاء البرمجة الوظيفية."
        ],
        answer: "باستخدام Riverpod مع تحسينات الأداء."
      },
      {
        question: "ما الفرق بين LiveData وStateFlow في Android؟",
        options: [
          "LiveData يرتبط بدورة الحياة، بينما StateFlow أكثر مرونة.",
          "StateFlow يرتبط بدورة الحياة، بينما LiveData أكثر مرونة.",
          "LiveData تُستخدم للبيانات الثابتة، بينما StateFlow ديناميكية.",
          "StateFlow تُستخدم للعمليات المتزامنة، بينما LiveData غير متزامنة."
        ],
        answer: "LiveData يرتبط بدورة الحياة، بينما StateFlow أكثر مرونة."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية useState في React؟",
        options: [
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للحالة.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُدير الحالة المحلية لمكون وظيفي."
        ],
        answer: "تُدير الحالة المحلية لمكون وظيفي."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية combineLatest في Combine؟",
        options: [
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن.",
          "تُدمج آخر قيم من عدة تدفقات."
        ],
        answer: "تُدمج آخر قيم من عدة تدفقات."
      },
      {
        question: "كيف يُمكن إدارة الحالة في تطبيقات SwiftUI؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "باستخدام @State و@EnvironmentObject."
        ],
        answer: "باستخدام @State و@EnvironmentObject."
      },
      {
        question: "ما الفرق بين Provider وRiverpod في Flutter؟",
        options: [
          "Provider يعتمد على InheritedWidget، بينما Riverpod لا يعتمد.",
          "Riverpod يعتمد على InheritedWidget، بينما Provider لا يعتمد.",
          "Provider تُستخدم للبيانات الثابتة، بينما Riverpod ديناميكية.",
          "Riverpod تُستخدم للعمليات المتزامنة، بينما Provider غير متزامنة."
        ],
        answer: "Provider يعتمد على InheritedWidget، بينما Riverpod لا يعتمد."
      },
      {
        question: "كيف تُستخدم الكلمة المفتاحية observable في MobX؟",
        options: [
          "تُنشئ كائنات ديناميكية داخل الفئة.",
          "تُحدد واجهة (interface) للحالة.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُحدد خاصية يتم مراقبتها للتغييرات."
        ],
        answer: "تُحدد خاصية يتم مراقبتها للتغييرات."
      },
      {
        question: "ما الغرض من الكلمة المفتاحية action في Redux؟",
        options: [
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن.",
          "تُحدد إجراءً يُغير الحالة."
        ],
        answer: "تُحدد إجراءً يُغير الحالة."
      },
      {
        question: "كيف يُمكن تحسين أداء إدارة الحالة؟",
        options: [
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام Redux وMobX.",
          "بإلغاء البرمجة الوظيفية.",
          "بتقليل التغييرات غير الضرورية للحالة."
        ],
        answer: "بتقليل التغييرات غير الضرورية للحالة."
      }
    ]
  },
  {
    title: "Testing",
    icon: <Bug className="w-5 h-5 text-red-400" />,
    questions: [
      {
        question: "ما الذي يميز اختبارات الوحدة (unit tests)؟",
        options: [
          "تُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "تُستخدم لإدارة قواعد البيانات العلائقية.",
          "تُدير العمليات غير المتزامنة تلقائيًا.",
          "تختبر وظائف فردية في الكود."
        ],
        answer: "تختبر وظائف فردية في الكود."
      },
      {
        question: "كيف تُجرى اختبارات التكامل (integration tests)؟",
        options: [
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "بتشغيل التطبيق مع بيانات محاكاة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "بتشغيل التطبيق مع بيانات محاكاة."
      },
      {
        question: "ما الفرق بين اختبارات UI واختبارات الوحدة؟",
        options: [
          "UI تختبر الواجهة، بينما الوحدة تختبر الوظائف.",
          "الوحدة تختبر الواجهة، بينما UI تختبر الوظائف.",
          "UI تُستخدم للبيانات القابلة للتعديل، بينما الوحدة ثابتة.",
          "الوحدة تُستخدم للبيانات الثابتة، بينما UI ديناميكية."
        ],
        answer: "UI تختبر الواجهة، بينما الوحدة تختبر الوظائف."
      },
      {
        question: "كيف تُستخدم مكتبة JUnit في Android؟",
        options: [
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات.",
          "لإجراء اختبارات الوحدة على كود Kotlin."
        ],
        answer: "لإجراء اختبارات الوحدة على كود Kotlin."
      },
      {
        question: "ما الغرض من مكتبة XCTest في iOS؟",
        options: [
          "تُجبر الاختبار على أن يكون ثابتًا (const).",
          "تُتيح استخدام الاختبار في دوال متزامنة فقط.",
          "تُلغي فحص null safety للاختبار.",
          "تُستخدم لاختبارات الوحدة والتكامل في Swift."
        ],
        answer: "تُستخدم لاختبارات الوحدة والتكامل في Swift."
      },
      {
        question: "كيف تُستخدم مكتبة Flutter Test؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "لإجراء اختبارات الوحدة وUI في Flutter."
        ],
        answer: "لإجراء اختبارات الوحدة وUI في Flutter."
      },
      {
        question: "ما دور مكتبة Espresso في Android؟",
        options: [
          "تُحدد واجهة (interface) للاختبار.",
          "تُنشئ كائنات ديناميكية.",
          "تُجبر الاختبار على أن يكون مجردًا (abstract).",
          "تُجري اختبارات واجهة المستخدم الآلية."
        ],
        answer: "تُجري اختبارات واجهة المستخدم الآلية."
      },
      {
        question: "كيف يُمكن إجراء اختبارات الأداء في تطبيقات الموبايل؟",
        options: [
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات.",
          "باستخدام أدوات مثل JMeter أو Instruments."
        ],
        answer: "باستخدام أدوات مثل JMeter أو Instruments."
      },
      {
        question: "ما الفرق بين اختبارات Mock وStub؟",
        options: [
          "Mock يتحقق من التفاعلات، بينما Stub يوفر بيانات.",
          "Stub يتحقق من التفاعلات، بينما Mock يوفر بيانات.",
          "Mock تُستخدم للبيانات القابلة للتعديل، بينما Stub ثابتة.",
          "Stub تُستخدم للبيانات الثابتة، بينما Mock ديناميكية."
        ],
        answer: "Mock يتحقق من التفاعلات، بينما Stub يوفر بيانات."
      },
      {
        question: "كيف تُستخدم مكتبة Mockito في Android؟",
        options: [
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة.",
          "تُنشئ كائنات محاكاة للاختبارات."
        ],
        answer: "تُنشئ كائنات محاكاة للاختبارات."
      },
      {
        question: "ما الغرض من مكتبة Quick في Swift؟",
        options: [
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية.",
          "تُوفر إطار عمل اختبار سلوكي (BDD)."
        ],
        answer: "تُوفر إطار عمل اختبار سلوكي (BDD)."
      },
      {
        question: "كيف يُمكن تحسين تغطية الاختبارات؟",
        options: [
          "بتقليل استخدام اختبارات الوحدة.",
          "بزيادة استخدام async في الاختبارات.",
          "بإلغاء اختبارات التكامل.",
          "بزيادة عدد الحالات المختبرة."
        ],
        answer: "بزيادة عدد الحالات المختبرة."
      },
      {
        question: "ما الفرق بين اختبارات Snapshot وUI في Flutter؟",
        options: [
          "Snapshot يلتقط صورًا، بينما UI يختبر التفاعل.",
          "UI يلتقط صورًا، بينما Snapshot يختبر التفاعل.",
          "Snapshot تُستخدم للبيانات الثابتة، بينما UI ديناميكية.",
          "UI تُستخدم للعمليات المتزامنة، بينما Snapshot غير متزامنة."
        ],
        answer: "Snapshot يلتقط صورًا، بينما UI يختبر التفاعل."
      },
      {
        question: "كيف تُستخدم مكتبة Robolectric في Android؟",
        options: [
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للاختبار.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُحاكي بيئة Android للاختبارات."
        ],
        answer: "تُحاكي بيئة Android للاختبارات."
      },
      {
        question: "ما الغرض من اختبارات A/B؟",
        options: [
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن.",
          "تُقارن بين نسختين من التطبيق."
        ],
        answer: "تُقارن بين نسختين من التطبيق."
      },
      {
        question: "كيف يُمكن إجراء اختبارات الأمان؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "باستخدام أدوات مثل OWASP ZAP."
        ],
        answer: "باستخدام أدوات مثل OWASP ZAP."
      },
      {
        question: "ما الفرق بين Black Box وWhite Box Testing؟",
        options: [
          "Black Box يختبر الوظائف، بينما White Box يختبر الكود.",
          "White Box يختبر الوظائف، بينما Black Box يختبر الكود.",
          "Black Box تُستخدم للبيانات الثابتة، بينما White Box ديناميكية.",
          "White Box تُستخدم للعمليات المتزامنة، بينما Black Box غير متزامنة."
        ],
        answer: "Black Box يختبر الوظائف، بينما White Box يختبر الكود."
      },
      {
        question: "كيف تُستخدم مكتبة Nimble في Swift؟",
        options: [
          "تُنشئ كائنات ديناميكية داخل الاختبار.",
          "تُحدد واجهة (interface) للاختبار.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُوفر مطابقات (matchers) لاختبارات BDD."
        ],
        answer: "تُوفر مطابقات (matchers) لاختبارات BDD."
      },
      {
        question: "ما الغرض من اختبارات الإجهاد (stress testing)؟",
        options: [
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن.",
          "تختبر أداء التطبيق تحت ضغط عالٍ."
        ],
        answer: "تختبر أداء التطبيق تحت ضغط عالٍ."
      },
      {
        question: "كيف يُمكن تحسين جودة الاختبارات؟",
        options: [
          "بزيادة استخدام async في الاختبارات.",
          "بتقليل عدد الحالات المختبرة.",
          "بإلغاء اختبارات التكامل.",
          "باستخدام اختبارات شاملة ومحاكاة دقيقة."
        ],
        answer: "باستخدام اختبارات شاملة ومحاكاة دقيقة."
      }
    ]
  },
  {
    title: "Deployment",
    icon: <Rocket className="w-5 h-5 text-blue-400" />,
    questions: [
      {
        question: "ما الذي يميز عملية النشر في Google Play؟",
        options: [
          "تُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "تُستخدم لإدارة قواعد البيانات العلائقية.",
          "تتطلب ملف APK أو AAB مع توقيع رقمي.",
          "تُدير العمليات غير المتزامنة تلقائيًا."
        ],
        answer: "تتطلب ملف APK أو AAB مع توقيع رقمي."
      },
      {
        question: "كيف تُنشر تطبيقات iOS على App Store؟",
        options: [
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام Xcode مع App Store Connect.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "باستخدام Xcode مع App Store Connect."
      },
      {
        question: "ما الفرق بين APK وAAB في Android؟",
        options: [
          "APK ملف كامل، بينما AAB للتوزيع الديناميكي.",
          "AAB ملف كامل، بينما APK للتوزيع الديناميكي.",
          "APK تُستخدم للبيانات القابلة للتعديل، بينما AAB ثابتة.",
          "AAB تُستخدم للبيانات الثابتة، بينما APK ديناميكية."
        ],
        answer: "APK ملف كامل، بينما AAB للتوزيع الديناميكي."
      },
      {
        question: "كيف تُحقق عملية Code Signing في iOS؟",
        options: [
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات.",
          "بتوقيع التطبيق بشهادة Apple."
        ],
        answer: "بتوقيع التطبيق بشهادة Apple."
      },
      {
        question: "ما الغرض من ملف Keystore في Android؟",
        options: [
          "تُجبر التطبيق على أن يكون ثابتًا (const).",
          "تُتيح استخدام التطبيق في دوال متزامنة فقط.",
          "تُلغي فحص null safety للتطبيق.",
          "تُخزن مفاتيح التوقيع الرقمي."
        ],
        answer: "تُخزن مفاتيح التوقيع الرقمي."
      },
      {
        question: "كيف تُستخدم أداة Fastlane في النشر؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "لأتمتة عمليات النشر على iOS وAndroid."
        ],
        answer: "لأتمتة عمليات النشر على iOS وAndroid."
      },
      {
        question: "ما دور ملف Info.plist في iOS؟",
        options: [
          "تُحدد واجهة (interface) للتطبيق.",
          "تُنشئ كائنات ديناميكية.",
          "تُجبر التطبيق على أن يكون مجردًا (abstract).",
          "تُحتوي على إعدادات التطبيق."
        ],
        answer: "تُحتوي على إعدادات التطبيق."
      },
      {
        question: "كيف يُمكن تحسين عملية النشر؟",
        options: [
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات.",
          "باستخدام CI/CD مثل GitHub Actions."
        ],
        answer: "باستخدام CI/CD مثل GitHub Actions."
      },
      {
        question: "ما الفرق بين Beta Testing وInternal Testing في Google Play؟",
        options: [
          "Beta عامة، بينما Internal لفريق محدود.",
          "Internal عامة، بينما Beta لفريق محدود.",
          "Beta تُستخدم للبيانات القابلة للتعديل، بينما Internal ثابتة.",
          "Internal تُستخدم للبيانات الثابتة، بينما Beta ديناميكية."
        ],
        answer: "Beta عامة، بينما Internal لفريق محدود."
      },
      {
        question: "كيف تُستخدم أداة TestFlight في iOS؟",
        options: [
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة.",
          "تُوفر اختبارًا تجريبيًا للتطبيق."
        ],
        answer: "تُوفر اختبارًا تجريبيًا للتطبيق."
      },
      {
        question: "ما الغرض من ملف build.gradle في Android؟",
        options: [
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية.",
          "يُدير إعدادات البناء والتبعيات."
        ],
        answer: "يُدير إعدادات البناء والتبعيات."
      },
      {
        question: "كيف يُمكن تقليل حجم تطبيق Android؟",
        options: [
          "بتقليل استخدام ViewModel وLiveData.",
          "بزيادة استخدام coroutines في العمليات المتزامنة.",
          "بتقليل إعادة التصيير باستخدام Compose.",
          "باستخدام ProGuard أو R8."
        ],
        answer: "باستخدام ProGuard أو R8."
      },
      {
        question: "ما الفرق بين App Store Review وGoogle Play Review؟",
        options: [
          "App Store أكثر صرامة، بينما Google Play أسرع.",
          "Google Play أكثر صرامة، بينما App Store أسرع.",
          "App Store تُستخدم للبيانات الثابتة، بينما Google Play ديناميكية.",
          "Google Play تُستخدم للعمليات المتزامنة، بينما App Store غير متزامنة."
        ],
        answer: "App Store أكثر صرامة، بينما Google Play أسرع."
      },
      {
        question: "كيف تُستخدم أداة Xcode في النشر؟",
        options: [
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للتطبيق.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُبني وتُنشر تطبيقات iOS."
        ],
        answer: "تُبني وتُنشر تطبيقات iOS."
      },
      {
        question: "ما الغرض من ملف pubspec.yaml في Flutter؟",
        options: [
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن.",
          "يُدير التبعيات وإعدادات التطبيق."
        ],
        answer: "يُدير التبعيات وإعدادات التطبيق."
      },
      {
        question: "كيف يُمكن أتمتة النشر في Flutter؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "باستخدام Fastlane أو GitHub Actions."
        ],
        answer: "باستخدام Fastlane أو GitHub Actions."
      },
      {
        question: "ما الفرق بين Release وDebug Builds؟",
        options: [
          "Release محسن، بينما Debug يحتوي معلومات تصحيح.",
          "Debug محسن، بينما Release يحتوي معلومات تصحيح.",
          "Release تُستخدم للبيانات الثابتة، بينما Debug ديناميكية.",
          "Debug تُستخدم للعمليات المتزامنة، بينما Release غير متزامنة."
        ],
        answer: "Release محسن، بينما Debug يحتوي معلومات تصحيح."
      },
      {
        question: "كيف تُستخدم أداة Gradle في Android؟",
        options: [
          "تُنشئ كائنات ديناميكية داخل التطبيق.",
          "تُحدد واجهة (interface) للتطبيق.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُدير عملية البناء والتبعيات."
        ],
        answer: "تُدير عملية البناء والتبعيات."
      },
      {
        question: "ما الغرض من App Store Connect؟",
        options: [
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن.",
          "تُدير نشر تطبيقات iOS."
        ],
        answer: "تُدير نشر تطبيقات iOS."
      },
      {
        question: "كيف يُمكن تحسين سرعة النشر؟",
        options: [
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام Fastlane.",
          "بإلغاء اختبارات النشر.",
          "باستخدام أنظمة CI/CD."
        ],
        answer: "باستخدام أنظمة CI/CD."
      }
    ]
  },
  {
    title: "Add-ons",
    icon: <Box className="w-5 h-5 text-yellow-400" />,
    questions: [
      {
        question: "ما الذي يميز مكتبة Firebase في تطبيقات الموبايل؟",
        options: [
          "تُوفر إدارة تلقائية للذاكرة مثل ARC.",
          "تُستخدم لإدارة قواعد البيانات العلائقية.",
          "تُدير العمليات غير المتزامنة تلقائيًا.",
          "تُوفر خدمات مثل الإشعارات وقواعد البيانات."
        ],
        answer: "تُوفر خدمات مثل الإشعارات وقواعد البيانات."
      },
      {
        question: "كيف تُستخدم مكتبة Alamofire في iOS؟",
        options: [
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "لإجراء طلبات HTTP بسهولة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "لإجراء طلبات HTTP بسهولة."
      },
      {
        question: "ما الفرق بين Firebase Firestore وRealtime Database؟",
        options: [
          "Firestore يدعم استعلامات معقدة، بينما Realtime أبسط.",
          "Realtime يدعم استعلامات معقدة، بينما Firestore أبسط.",
          "Firestore تُستخدم للبيانات القابلة للتعديل، بينما Realtime ثابتة.",
          "Realtime تُستخدم للبيانات الثابتة، بينما Firestore ديناميكية."
        ],
        answer: "Firestore يدعم استعلامات معقدة، بينما Realtime أبسط."
      },
      {
        question: "كيف تُستخدم مكتبة Retrofit في Android؟",
        options: [
          "باستخدام الكلمة المفتاحية extends لتوسيع الكائنات.",
          "باستخدام الكلمة المفتاحية abstract لإنشاء كائنات.",
          "باستخدام الكلمة المفتاحية mixin لدمج الكائنات.",
          "لإجراء طلبات API بسهولة."
        ],
        answer: "لإجراء طلبات API بسهولة."
      },
      {
        question: "ما الغرض من مكتبة Push Notifications؟",
        options: [
          "تُجبر التطبيق على أن يكون ثابتًا (const).",
          "تُتيح استخدام التطبيق في دوال متزامنة فقط.",
          "تُلغي فحص null safety للتطبيق.",
          "تُرسل إشعارات فورية للمستخدمين."
        ],
        answer: "تُرسل إشعارات فورية للمستخدمين."
      },
      {
        question: "كيف تُستخدم مكتبة Dio في Flutter؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "لإجراء طلبات HTTP بسهولة."
        ],
        answer: "لإجراء طلبات HTTP بسهولة."
      },
      {
        question: "ما دور مكتبة Core Data في iOS؟",
        options: [
          "تُحدد واجهة (interface) للتطبيق.",
          "تُنشئ كائنات ديناميكية.",
          "تُجبر التطبيق على أن يكون مجردًا (abstract).",
          "تُدير قاعدة بيانات محلية."
        ],
        answer: "تُدير قاعدة بيانات محلية."
      },
      {
        question: "كيف يُمكن استخدام مكتبة Google Maps في الموبايل؟",
        options: [
          "باستخدام if-else مع دوال متزامنة.",
          "باستخدام switch-case للتحقق من الحالات.",
          "باستخدام for-loop لمراجعة البيانات.",
          "لعرض الخرائط وتحديد المواقع."
        ],
        answer: "لعرض الخرائط وتحديد المواقع."
      },
      {
        question: "ما الفرق بين OneSignal وFirebase Cloud Messaging؟",
        options: [
          "OneSignal أسهل للإشعارات، بينما FCM مدمج مع Google.",
          "FCM أسهل للإشعارات، بينما OneSignal مدمج مع Google.",
          "OneSignal تُستخدم للبيانات القابلة للتعديل، بينما FCM ثابتة.",
          "FCM تُستخدم للبيانات الثابتة، بينما OneSignal ديناميكية."
        ],
        answer: "OneSignal أسهل للإشعارات، بينما FCM مدمج مع Google."
      },
      {
        question: "كيف تُستخدم مكتبة OkHttp في Android؟",
        options: [
          "تُؤخر تهيئة القيم حتى وقت الاستخدام.",
          "تُجبر القيم على أن تكون ديناميكية.",
          "تُتيح تعديل القيم في الدوال المتزامنة.",
          "تُجري طلبات HTTP بكفاءة."
        ],
        answer: "تُجري طلبات HTTP بكفاءة."
      },
      {
        question: "ما الغرض من مكتبة Realm؟",
        options: [
          "تُجبر الفئة على أن تكون مجردة (abstract).",
          "تُحدد واجهة (interface) للفئة.",
          "تُنشئ كائنات ديناميكية.",
          "تُدير قاعدة بيانات موبايل."
        ],
        answer: "تُدير قاعدة بيانات موبايل."
      },
      {
        question: "كيف يُمكن تحسين أداء مكتبات الإضافات؟",
        options: [
          "بتقليل استخدام Firebase وRealm.",
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل التبعيات غير الضرورية.",
          "بإلغاء البرمجة الوظيفية."
        ],
        answer: "بتقليل التبعيات غير الضرورية."
      },
      {
        question: "ما الفرق بين SQLite وRoom في Android؟",
        options: [
          "Room يستخدم SQLite مع ORM، بينما SQLite خام.",
          "SQLite يستخدم ORM، بينما Room خام.",
          "Room تُستخدم للبيانات الثابتة، بينما SQLite ديناميكية.",
          "SQLite تُستخدم للعمليات المتزامنة، بينما Room غير متزامنة."
        ],
        answer: "Room يستخدم SQLite مع ORM، بينما SQLite خام."
      },
      {
        question: "كيف تُستخدم مكتبة Lottie في الموبايل؟",
        options: [
          "تُنشئ كائنات ثابتة (static objects).",
          "تُحدد واجهة (interface) للتطبيق.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُعرض رسومًا متحركة بصيغة JSON."
        ],
        answer: "تُعرض رسومًا متحركة بصيغة JSON."
      },
      {
        question: "ما الغرض من مكتبة Crashlytics؟",
        options: [
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُلغي فحص null safety للكائن.",
          "تُراقب أعطال التطبيق وتقاريرها."
        ],
        answer: "تُراقب أعطال التطبيق وتقاريرها."
      },
      {
        question: "كيف تُستخدم مكتبة MapKit في iOS؟",
        options: [
          "باستخدام ملف package.json مع npm.",
          "باستخدام ملف pubspec.yaml مع إعدادات pub.",
          "باستخدام ملف HTML مع إعدادات export.",
          "لعرض الخرائط وتحديد المواقع."
        ],
        answer: "لعرض الخرائط وتحديد المواقع."
      },
      {
        question: "ما الفرق بين Firebase Analytics وGoogle Analytics؟",
        options: [
          "Firebase مدمج مع التطبيقات، بينما Google عام.",
          "Google مدمج مع التطبيقات، بينما Firebase عام.",
          "Firebase تُستخدم للبيانات القابلة للتعديل، بينما Google ثابتة.",
          "Google تُستخدم للبيانات الثابتة، بينما Firebase ديناميكية."
        ],
        answer: "Firebase مدمج مع التطبيقات، بينما Google عام."
      },
      {
        question: "كيف تُستخدم مكتبة Glide في Android؟",
        options: [
          "تُنشئ كائنات ديناميكية داخل التطبيق.",
          "تُحدد واجهة (interface) للتطبيق.",
          "تُجبر الفئة على أن تكون مجردة.",
          "تُدير تحميل الصور بكفاءة."
        ],
        answer: "تُدير تحميل الصور بكفاءة."
      },
      {
        question: "ما الغرض من مكتبة ARKit؟",
        options: [
          "تُنشئ كائنات ثابتة لا يمكن تغييرها.",
          "تُؤخر تهيئة الكائنات حتى وقت الاستخدام.",
          "تُلغي فحص null safety للكائن.",
          "تُوفر ميزات الواقع المعزز في iOS."
        ],
        answer: "تُوفر ميزات الواقع المعزز في iOS."
      },
      {
        question: "كيف يُمكن تحسين أداء مكتبات الخرائط؟",
        options: [
          "بزيادة استخدام async في العمليات المتزامنة.",
          "بتقليل استخدام Firebase.",
          "بإلغاء البرمجة الوظيفية.",
          "بتقليل طلبات API واستخدام التخزين المؤقت."
        ],
        answer: "بتقليل طلبات API واستخدام التخزين المؤقت."
      }
    ]
  }, 
  {
    title: "Firebase",
    icon: <Box className="w-5 h-5 text-orange-300" />,
    questions: [
      {
        question: "ما الذي يميز Firestore مقارنة بـ Realtime Database في Firebase؟",
        options: [
          "يدعم فقط تحديثات الوقت الفعلي بدون هياكل بيانات معقدة.",
          "يُستخدم حصريًا لإدارة تسجيل دخول المستخدمين.",
          "يوفر هياكل بيانات مرنة وقوية مع استعلامات متقدمة.",
          "يتطلب إدارة خوادم مخصصة لتشغيله."
        ],
        answer: "يوفر هياكل بيانات مرنة وقوية مع استعلامات متقدمة."
      },
      {
        question: "كيف يمكن تحسين أمان Firestore في تطبيق موبايل؟",
        options: [
          "باستخدام استعلامات SQL للتحقق من البيانات.",
          "بتطبيق قواعد أمان Firestore للتحكم في الوصول.",
          "بتقليل استخدام واجهات برمجية خارجية.",
          "بإضافة أنماط CSS لتشفير البيانات."
        ],
        answer: "بتطبيق قواعد أمان Firestore للتحكم في الوصول."
      },
      {
        question: "ما الغرض من Firebase Cloud Functions في سياق تطبيقات الموبايل؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية تلقائيًا.",
          "تنفيذ منطق خلفي مخصص يُستجاب له بناءً على أحداث Firebase.",
          "تحسين أداء الرسوم المتحركة في التطبيق.",
          "إدارة قواعد بيانات علائقية محلية."
        ],
        answer: "تنفيذ منطق خلفي مخصص يُستجاب له بناءً على أحداث Firebase."
      },
      {
        question: "كيف يمكن استخدام Firebase Remote Config لتحسين تجربة المستخدم؟",
        options: [
          "بتغيير إعدادات التطبيق ديناميكيًا دون إعادة نشر.",
          "بتخزين بيانات المستخدم في قاعدة بيانات سحابية.",
          "بإنشاء استعلامات SQL لتحليل البيانات.",
          "بتصميم واجهات مستخدم جديدة تلقائيًا."
        ],
        answer: "بتغيير إعدادات التطبيق ديناميكيًا دون إعادة نشر."
      },
      {
        question: "ما التحدي الرئيسي عند دمج Firebase Authentication مع تطبيق Flutter؟",
        options: [
          "تطبيق أنماط CSS لتسجيل الدخول.",
          "إدارة حالات المستخدم عبر تدفقات المصادقة المعقدة.",
          "إنشاء قواعد بيانات علائقية محلية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة حالات المستخدم عبر تدفقات المصادقة المعقدة."
      },
      {
        question: "كيف يمكن تحليل أداء تطبيق باستخدام Firebase Performance Monitoring؟",
        options: [
          "بتصميم واجهات مستخدم ديناميكية.",
          "بتتبع زمن استجابة الشبكة وأداء واجهات برمجية.",
          "بإنشاء استعلامات SQL لتحليل البيانات.",
          "بتخزين ملفات الوسائط في السحابة."
        ],
        answer: "بتتبع زمن استجابة الشبكة وأداء واجهات برمجية."
      },
      {
        question: "ما الفرق بين Firebase Crashlytics وAnalytics؟",
        options: [
          "Crashlytics يُستخدم لإنشاء واجهات مستخدم، بينما Analytics لتحليل البيانات.",
          "Analytics يتتبع الأعطال، بينما Crashlytics يحلل سلوك المستخدم.",
          "Crashlytics يتتبع الأعطال، بينما Analytics يحلل سلوك المستخدم.",
          "كلاهما متماثلان في تحليل الأداء."
        ],
        answer: "Crashlytics يتتبع الأعطال، بينما Analytics يحلل سلوك المستخدم."
      },
      {
        question: "كيف يمكن إرسال إشعارات مخصصة باستخدام Firebase Cloud Messaging؟",
        options: [
          "بإنشاء استعلامات SQL لتخصيص الإشعارات.",
          "بتصميم واجهات مستخدم لكل إشعار.",
          "بتكوين رسائل FCM مع بيانات مخصصة عبر الخادم.",
          "بتطبيق أنماط CSS على الإشعارات."
        ],
        answer: "بتكوين رسائل FCM مع بيانات مخصصة عبر الخادم."
      },
      {
        question: "ما الدور الذي تلعبه Firebase A/B Testing في تطوير التطبيقات؟",
        options: [
          "إنشاء قواعد بيانات علائقية لاختبار البيانات.",
          "مقارنة إصدارات مختلفة من التطبيق لتحسين تجربة المستخدم.",
          "تحسين أداء الرسوم المتحركة في التطبيق.",
          "إدارة تسجيل دخول المستخدمين."
        ],
        answer: "مقارنة إصدارات مختلفة من التطبيق لتحسين تجربة المستخدم."
      },
      {
        question: "كيف يمكن تحسين كفاءة استعلامات Firestore في تطبيق كبير؟",
        options: [
          "بتقليل عدد الاستعلامات واستخدام فهارس فعالة.",
          "بتصميم واجهات مستخدم ديناميكية.",
          "بتطبيق أنماط CSS لتحسين الأداء.",
          "بإنشاء قواعد بيانات علائقية محلية."
        ],
        answer: "بتقليل عدد الاستعلامات واستخدام فهارس فعالة."
      },
      {
        question: "ما التحدي عند استخدام Firebase Hosting لتطبيقات الويب؟",
        options: [
          "إدارة توافق إصدارات المتصفحات مع محتوى ثابت.",
          "إنشاء استعلامات SQL للوصول إلى المحتوى.",
          "تحسين أداء الرسوم المتحركة.",
          "تخزين بيانات المستخدم في قاعدة بيانات."
        ],
        answer: "إدارة توافق إصدارات المتصفحات مع محتوى ثابت."
      },
      {
        question: "كيف يمكن دمج Firebase مع React Native بكفاءة؟",
        options: [
          "بتصميم واجهات مستخدم باستخدام CSS.",
          "باستخدام مكتبة react-native-firebase مع تكوين دقيق.",
          "بإنشاء استعلامات SQL للوصول إلى Firebase.",
          "بتخزين ملفات الوسائط محليًا."
        ],
        answer: "باستخدام مكتبة react-native-firebase مع تكوين دقيق."
      },
      {
        question: "ما الغرض من Firebase App Distribution؟",
        options: [
          "توزيع إصدارات تجريبية من التطبيق على المختبرين.",
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "توزيع إصدارات تجريبية من التطبيق على المختبرين."
      },
      {
        question: "كيف يمكن إدارة تكاليف Firebase في تطبيق كبير؟",
        options: [
          "بتصميم واجهات مستخدم أقل تعقيدًا.",
          "بتحديد حدود الاستخدام وتحسين الاستعلامات.",
          "بتطبيق أنماط CSS لتقليل الموارد.",
          "بإنشاء قواعد بيانات علائقية محلية."
        ],
        answer: "بتحديد حدود الاستخدام وتحسين الاستعلامات."
      },
      {
        question: "ما الفرق بين Firebase Authentication وCloud Identity؟",
        options: [
          "Authentication لإدارة المستخدمين، Cloud Identity لإدارة المؤسسات.",
          "Cloud Identity لإدارة المستخدمين، Authentication للمؤسسات.",
          "كلاهما متماثلان في إدارة المستخدمين.",
          "Authentication يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "Authentication لإدارة المستخدمين، Cloud Identity لإدارة المؤسسات."
      },
      {
        question: "كيف يمكن استخدام Firebase ML لتحسين التطبيق؟",
        options: [
          "بتصميم واجهات مستخدم ديناميكية.",
          "بتطبيق نماذج تعلم آلي مخصصة أو جاهزة.",
          "بإنشاء استعلامات SQL لتحليل البيانات.",
          "بتخزين ملفات الوسائط في السحابة."
        ],
        answer: "بتطبيق نماذج تعلم آلي مخصصة أو جاهزة."
      },
      {
        question: "ما التحدي عند دمج Firebase مع تطبيقات متعددة المنصات؟",
        options: [
          "إدارة تكوينات منصات مختلفة مثل iOS وAndroid.",
          "إنشاء استعلامات SQL لكل منصة.",
          "تحسين أداء الرسوم المتحركة.",
          "تخزين بيانات المستخدم محليًا."
        ],
        answer: "إدارة تكوينات منصات مختلفة مثل iOS وAndroid."
      },
      {
        question: "كيف يمكن استخدام Firebase Dynamic Links؟",
        options: [
          "إنشاء روابط ديناميكية لتوجيه المستخدمين إلى محتوى محدد.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة.",
          "تصميم واجهات مستخدم ديناميكية."
        ],
        answer: "إنشاء روابط ديناميكية لتوجيه المستخدمين إلى محتوى محدد."
      },
      {
        question: "ما الغرض من Firebase In-App Messaging؟",
        options: [
          "إرسال رسائل داخل التطبيق لتحسين التفاعل.",
          "إنشاء استعلامات SQL لتحليل البيانات.",
          "تخزين ملفات الوسائط في السحابة.",
          "تصميم واجهات مستخدم ديناميكية."
        ],
        answer: "إرسال رسائل داخل التطبيق لتحسين التفاعل."
      },
      {
        question: "كيف يمكن تحسين أداء Firestore في تطبيقات الدردشة؟",
        options: [
          "بتقليل الكتابة غير الضرورية واستخدام استعلامات فعالة.",
          "بتصميم واجهات مستخدم ديناميكية.",
          "بتطبيق أنماط CSS لتحسين الأداء.",
          "بإنشاء قواعد بيانات علائقية محلية."
        ],
        answer: "بتقليل الكتابة غير الضرورية واستخدام استعلامات فعالة."
      }
    ]
  },
  {
    title: "Dio (Flutter)",
    icon: <Box className="w-5 h-5 text-blue-300" />,
    questions: [
      {
        question: "ما الغرض من مكتبة Dio في تطبيقات Flutter؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إجراء طلبات HTTP بسهولة وإدارة الاستجابات.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إجراء طلبات HTTP بسهولة وإدارة الاستجابات."
      },
      {
        question: "كيف يمكن استخدام Interceptors في Dio؟",
        options: [
          "لتعديل الطلبات أو الاستجابات قبل معالجتها.",
          "لتخزين بيانات المستخدم في قاعدة بيانات.",
          "لتطبيق أنماط CSS على الطلبات.",
          "لإنشاء استعلامات SQL للوصول إلى.",
        ],
        answer: "لتعديل الطلبات أو الاستجابات قبل معالجتها."
      },
      {
        question: "ما الفرق بين Dio ومكتبة http المدمجة في Flutter؟",
        options: [
          "http أكثر تقدمًا في إدارة الطلبات المعقدة.",
          "Dio توفر واجهة أبسط مع ميزات مثل Interceptors.",
          "كلاهما متماثلان تمامًا في الأداء.",
          "http تُستخدم لواجهات المستخدم فقط."
        ],
        answer: "Dio توفر واجهة أبسط مع ميزات مثل Interceptors."
      },
      {
        question: "كيف يمكن معالجة الأخطاء في طلبات Dio؟",
        options: [
          "بتصميم واجهات مستخدم لعرض الأخطاء.",
          "بإنشاء استعلامات SQL لتحليل الأخطاء.",
          "باستخدام try-catch مع DioError لإدارة الأخطاء.",
          "بتخزين سجلات الأخطاء في قاعدة بيانات."
        ],
        answer: "باستخدام try-catch مع DioError لإدارة الأخطاء."
      },
      {
        question: "ما التحدي عند إجراء طلبات HTTP متعددة باستخدام Dio؟",
        options: [
          "إدارة التسلسل وتجنب التضارب في الاستجابات.",
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL لكل طلب.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة التسلسل وتجنب التضارب في الاستجابات."
      },
      {
        question: "كيف يمكن تكوين Headers في طلبات Dio؟",
        options: [
          "بتعيين Headers عبر خيارات الطلب أو Interceptors.",
          "بتصميم واجهات مستخدم لإدارة Headers.",
          "بإنشاء استعلامات SQL لتكوين Headers.",
          "بتخزين Headers في قاعدة بيانات."
        ],
        answer: "بتعيين Headers عبر خيارات الطلب أو Interceptors."
      },
      {
        question: "ما الغرض من Cancel Token في Dio؟",
        options: [
          "إلغاء طلبات HTTP قيد التنفيذ.",
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إلغاء طلبات HTTP قيد التنفيذ."
      },
      {
        question: "كيف يمكن تحسين أداء طلبات Dio في تطبيق Flutter؟",
        options: [
          "بتقليل عدد الطلبات واستخدام التخزين المؤقت.",
          "بتصميم واجهات مستخدم أقل تعقيدًا.",
          "بإنشاء استعلامات SQL لتحسين الأداء.",
          "بتخزين بيانات الطلبات محليًا."
        ],
        answer: "بتقليل عدد الطلبات واستخدام التخزين المؤقت."
      },
      {
        question: "ما الفرق بين GET وPOST في طلبات Dio؟",
        options: [
          "GET لإنشاء بيانات، POST لجلب البيانات.",
          "POST لإنشاء بيانات، GET لجلب البيانات.",
          "كلاهما متماثلان في الوظيفة.",
          "GET يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "POST لإنشاء بيانات، GET لجلب البيانات."
      },
      {
        question: "كيف يمكن دمج Dio مع Provider لإدارة الحالة؟",
        options: [
          "بتصميم واجهات مستخدم لعرض البيانات.",
          "بتخزين بيانات الطلبات في قاعدة بيانات.",
          "بإنشاء خدمة Dio تُستخدم مع Provider لتحديث الحالة.",
          "بتطبيق أنماط CSS على البيانات."
        ],
        answer: "بإنشاء خدمة Dio تُستخدم مع Provider لتحديث الحالة."
      },
      {
        question: "ما التحدي عند استخدام Dio مع واجهات برمجية محمية؟",
        options: [
          "إدارة المصادقة وتحديث التوكنات تلقائيًا.",
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL للوصول إلى الواجهة.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة المصادقة وتحديث التوكنات تلقائيًا."
      },
      {
        question: "كيف يمكن تحميل ملف باستخدام Dio؟",
        options: [
          "بإنشاء استعلامات SQL لتحميل الملفات.",
          "بتصميم واجهات مستخدم لعرض الملفات.",
          "باستخدام FormData في طلبات POST.",
          "بتخزين الملفات في قاعدة بيانات."
        ],
        answer: "باستخدام FormData في طلبات POST."
      },
      {
        question: "ما الغرض من Response Transformer في Dio؟",
        options: [
          "تحويل الاستجابات إلى تنسيقات مخصصة قبل المعالجة.",
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "تحويل الاستجابات إلى تنسيقات مخصصة قبل المعالجة."
      },
      {
        question: "كيف يمكن إدارة Timeout في طلبات Dio؟",
        options: [
          "بتصميم واجهات مستخدم لإظهار أخطاء Timeout.",
          "بتعيين مهلة زمنية عبر خيارات الطلب.",
          "بإنشاء استعلامات SQL لإدارة Timeout.",
          "بتخزين سجلات Timeout في قاعدة بيانات."
        ],
        answer: "بتعيين مهلة زمنية عبر خيارات الطلب."
      },
      {
        question: "ما الفرق بين Dio وRetrofit من حيث الاستخدام؟",
        options: [
          "Dio لتطبيقات Android فقط، Retrofit لتطبيقات Flutter.",
          "Retrofit لتطبيقات Android، Dio لتطبيقات Flutter.",
          "كلاهما متماثلان في الوظيفة.",
          "Dio يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "Retrofit لتطبيقات Android، Dio لتطبيقات Flutter."
      },
      {
        question: "كيف يمكن اختبار طلبات Dio في تطبيق Flutter؟",
        options: [
          "بإنشاء استعلامات SQL لمحاكاة الطلبات.",
          "بتصميم واجهات مستخدم لاختبار الطلبات.",
          "باستخدام Mock لمحاكاة استجابات الواجهة البرمجية.",
          "بتخزين بيانات الاختبار في قاعدة بيانات."
        ],
        answer: "باستخدام Mock لمحاكاة استجابات الواجهة البرمجية."
      },
      {
        question: "ما التحدي عند استخدام Dio في تطبيقات متصلة دائمًا؟",
        options: [
          "إدارة إعادة المحاولة عند فقدان الاتصال.",
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL لكل طلب.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة إعادة المحاولة عند فقدان الاتصال."
      },
      {
        question: "كيف يمكن تكوين BaseOptions في Dio؟",
        options: [
          "بتعيين إعدادات افتراضية مثل URL وTimeout.",
          "بتصميم واجهات مستخدم لإدارة الإعدادات.",
          "بإنشاء استعلامات SQL لتكوين الإعدادات.",
          "بتخزين الإعدادات في قاعدة بيانات."
        ],
        answer: "بتعيين إعدادات افتراضية مثل URL وTimeout."
      },
      {
        question: "ما الغرض من QueuedInterceptors في Dio؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة تسلسل الInterceptors للطلبات المعقدة.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة تسلسل الInterceptors للطلبات المعقدة."
      },
      {
        question: "كيف يمكن تحميل ملفات متعددة باستخدام Dio؟",
        options: [
          "بتصميم واجهات مستخدم لعرض الملفات.",
          "بإنشاء استعلامات SQL لتحميل الملفات.",
          "باستخدام FormData مع قائمة ملفات في طلب POST.",
          "بتخزين الملفات في قاعدة بيانات."
        ],
        answer: "باستخدام FormData مع قائمة ملفات في طلب POST."
      }
    ]
  },
  {
    title: "Retrofit (Kotlin)",
    icon: <Box className="w-5 h-5 text-green-300" />,
    questions: [
      {
        question: "ما الغرض من مكتبة Retrofit في تطبيقات Android باستخدام Kotlin؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "إجراء طلبات HTTP بتعريف واجهات برمجية بسيطة.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إجراء طلبات HTTP بتعريف واجهات برمجية بسيطة."
      },
      {
        question: "كيف يمكن تعريف واجهة برمجية في Retrofit؟",
        options: [
          "بتصميم واجهات مستخدم للواجهة البرمجية.",
          "بإنشاء استعلامات SQL لتعريف الواجهة.",
          "باستخدام Annotations مثل `@GET` و`@POST`.",
          "بتخزين تعريف الواجهة في قاعدة بيانات."
        ],
        answer: "باستخدام Annotations مثل `@GET` و`@POST`."
      },
      {
        question: "ما الفرق بين Retrofit وOkHttp؟",
        options: [
          "OkHttp لإنشاء واجهات مستخدم، Retrofit لإدارة الطلبات.",
          "Retrofit يعتمد على OkHttp لإدارة الطلبات الشبكية.",
          "كلاهما متماثلان في إدارة الطلبات.",
          "OkHttp يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "Retrofit يعتمد على OkHttp لإدارة الطلبات الشبكية."
      },
      {
        question: "كيف يمكن معالجة الأخطاء في طلبات Retrofit؟",
        options: [
          "بتصميم واجهات مستخدم لعرض الأخطاء.",
          "باستخدام try-catch مع HttpException أو IOException.",
          "بإنشاء استعلامات SQL لتحليل الأخطاء.",
          "بتخزين سجلات الأخطاء في قاعدة بيانات."
        ],
        answer: "باستخدام try-catch مع HttpException أو IOException."
      },
      {
        question: "ما التحدي عند دمج Retrofit مع Coroutines في Kotlin؟",
        options: [
          "إدارة تدفق البيانات غير المتزامن بكفاءة.",
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL لكل طلب.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة تدفق البيانات غير المتزامن بكفاءة."
      },
      {
        question: "كيف يمكن تكوين Headers في طلبات Retrofit؟",
        options: [
          "بتصميم واجهات مستخدم لإدارة Headers.",
          "بإنشاء استعلامات SQL لتكوين Headers.",
          "باستخدام `@Header` أو Interceptor في OkHttp.",
          "بتخزين Headers في قاعدة بيانات."
        ],
        answer: "باستخدام `@Header` أو Interceptor في OkHttp."
      },
      {
        question: "ما الغرض من Converter في Retrofit؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "تحويل استجابات JSON إلى كائنات Kotlin.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "تحويل استجابات JSON إلى كائنات Kotlin."
      },
      {
        question: "كيف يمكن تحسين أداء طلبات Retrofit في تطبيق Android؟",
        options: [
          "بتصميم واجهات مستخدم أقل تعقيدًا.",
          "بتقليل عدد الطلبات واستخدام التخزين المؤقت.",
          "بإنشاء استعلامات SQL لتحسين الأداء.",
          "بتخزين بيانات الطلبات محليًا."
        ],
        answer: "بتقليل عدد الطلبات واستخدام التخزين المؤقت."
      },
      {
        question: "ما الفرق بين `@Query` و`@Path` في Retrofit؟",
        options: [
          "`@Query` للمعاملات الديناميكية، `@Path` لمسارات URL.",
          "`@Path` للمعاملات الديناميكية، `@Query` لمسارات URL.",
          "كلاهما متماثلان في الوظيفة.",
          "`@Query` يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "`@Query` للمعاملات الديناميكية، `@Path` لمسارات URL."
      },
      {
        question: "كيف يمكن دمج Retrofit مع Room لإدارة البيانات؟",
        options: [
          "بتصميم واجهات مستخدم لعرض البيانات.",
          "بتخزين بيانات Retrofit في قاعدة Room محلية.",
          "بإنشاء استعلامات SQL لكل طلب.",
          "بتطبيق أنماط CSS على البيانات."
        ],
        answer: "بتخزين بيانات Retrofit في قاعدة Room محلية."
      },
      {
        question: "ما التحدي عند استخدام Retrofit مع واجهات برمجية محمية؟",
        options: [
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL للوصول إلى الواجهة.",
          "إدارة المصادقة وتحديث التوكنات تلقائيًا.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة المصادقة وتحديث التوكنات تلقائيًا."
      },
      {
        question: "كيف يمكن تحميل ملف باستخدام Retrofit؟",
        options: [
          "بإنشاء استعلامات SQL لتحميل الملفات.",
          "بتصميم واجهات مستخدم لعرض الملفات.",
          "باستخدام `@Multipart` مع `@Part` في طلب POST.",
          "بتخزين الملفات في قاعدة بيانات."
        ],
        answer: "باستخدام `@Multipart` مع `@Part` في طلب POST."
      },
      {
        question: "ما الغرض من CallAdapter في Retrofit؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "تحويل استجابات الطلبات إلى أنواع مثل Flow أو LiveData.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "تحويل استجابات الطلبات إلى أنواع مثل Flow أو LiveData."
      },
      {
        question: "كيف يمكن إدارة Timeout في طلبات Retrofit؟",
        options: [
          "بتصميم واجهات مستخدم لإظهار أخطاء Timeout.",
          "بإنشاء استعلامات SQL لإدارة Timeout.",
          "بتعيين مهلة زمنية عبر OkHttpClient.",
          "بتخزين سجلات Timeout في قاعدة بيانات."
        ],
        answer: "بتعيين مهلة زمنية عبر OkHttpClient."
      },
      {
        question: "ما الفرق بين Retrofit وDio من حيث الاستخدام؟",
        options: [
          "Dio لتطبيقات Android، Retrofit لتطبيقات Flutter.",
          "Retrofit لتطبيقات Android، Dio لتطبيقات Flutter.",
          "كلاهما متماثلان في الوظيفة.",
          "Retrofit يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "Retrofit لتطبيقات Android، Dio لتطبيقات Flutter."
      },
      {
        question: "كيف يمكن اختبار طلبات Retrofit في تطبيق Android؟",
        options: [
          "بإنشاء استعلامات SQL لمحاكاة الطلبات.",
          "بتصميم واجهات مستخدم لاختبار الطلبات.",
          "باستخدام MockWebServer لمحاكاة الاستجابات.",
          "بتخزين بيانات الاختبار في قاعدة بيانات."
        ],
        answer: "باستخدام MockWebServer لمحاكاة الاستجابات."
      },
      {
        question: "ما التحدي عند استخدام Retrofit في تطبيقات متصلة دائمًا؟",
        options: [
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL لكل طلب.",
          "إدارة إعادة المحاولة عند فقدان الاتصال.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة إعادة المحاولة عند فقدان الاتصال."
      },
      {
        question: "كيف يمكن تكوين Interceptor في Retrofit؟",
        options: [
          "بتصميم واجهات مستخدم لإدارة Interceptor.",
          "بإنشاء استعلامات SQL لتكوين Interceptor.",
          "بإضافته إلى OkHttpClient عند إنشاء Retrofit.",
          "بتخزين Interceptor في قاعدة بيانات."
        ],
        answer: "بإضافته إلى OkHttpClient عند إنشاء Retrofit."
      },
      {
        question: "ما الغرض من `@Body` في Retrofit؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "إرسال كائن JSON كجسم الطلب.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إرسال كائن JSON كجسم الطلب."
      },
      {
        question: "كيف يمكن تحميل ملفات متعددة باستخدام Retrofit؟",
        options: [
          "بتصميم واجهات مستخدم لعرض الملفات.",
          "بإنشاء استعلامات SQL لتحميل الملفات.",
          "باستخدام `@Multipart` مع قائمة `@Part`.",
          "بتخزين الملفات في قاعدة بيانات."
        ],
        answer: "باستخدام `@Multipart` مع قائمة `@Part`."
      }
    ]
  },
  {
    title: "Alamofire (Swift)",
    icon: <Box className="w-5 h-5 text-orange-300" />,
    questions: [
      {
        question: "ما الغرض من مكتبة Alamofire في تطبيقات iOS باستخدام Swift؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إجراء طلبات HTTP بسهولة وإدارة الاستجابات.",
          "إدارة قواعد بيانات علائقية.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إجراء طلبات HTTP بسهولة وإدارة الاستجابات."
      },
      {
        question: "كيف يمكن استخدام Interceptors في Alamofire؟",
        options: [
          "بتصميم واجهات مستخدم لإدارة Interceptors.",
          "بإنشاء استعلامات SQL لتكوين Interceptors.",
          "لتعديل الطلبات أو الاستجابات عبر RequestInterceptor.",
          "بتخزين Interceptors في قاعدة بيانات."
        ],
        answer: "لتعديل الطلبات أو الاستجابات عبر RequestInterceptor."
      },
      {
        question: "ما الفرق بين Alamofire وURLSession المدمج في Swift؟",
        options: [
          "URLSession أكثر تقدمًا في إدارة الطلبات المعقدة.",
          "Alamofire توفر واجهة أبسط مع ميزات إضافية.",
          "كلاهما متماثلان تمامًا في الأداء.",
          "URLSession تُستخدم لواجهات المستخدم فقط."
        ],
        answer: "Alamofire توفر واجهة أبسط مع ميزات إضافية."
      },
      {
        question: "كيف يمكن معالجة الأخطاء في طلبات Alamofire؟",
        options: [
          "بتصميم واجهات مستخدم لعرض الأخطاء.",
          "بإنشاء استعلامات SQL لتحليل الأخطاء.",
          "باستخدام AFError في استجابات الطلب.",
          "بتخزين سجلات الأخطاء في قاعدة بيانات."
        ],
        answer: "باستخدام AFError في استجابات الطلب."
      },
      {
        question: "ما التحدي عند دمج Alamofire مع Combine في Swift؟",
        options: [
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL لكل طلب.",
          "إدارة تدفق البيانات غير المتزامن بكفاءة.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة تدفق البيانات غير المتزامن بكفاءة."
      },
      {
        question: "كيف يمكن تكوين Headers في طلبات Alamofire؟",
        options: [
          "بتصميم واجهات مستخدم لإدارة Headers.",
          "بإنشاء استعلامات SQL لتكوين Headers.",
          "بتعيين Headers عبر HTTPHeaders أو Interceptor.",
          "بتخزين Headers في قاعدة بيانات."
        ],
        answer: "بتعيين Headers عبر HTTPHeaders أو Interceptor."
      },
      {
        question: "ما الغرض من Response Serialization في Alamofire؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "تحويل استجابات JSON إلى كائنات Swift.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "تحويل استجابات JSON إلى كائنات Swift."
      },
      {
        question: "كيف يمكن تحسين أداء طلبات Alamofire في تطبيق iOS؟",
        options: [
          "بتصميم واجهات مستخدم أقل تعقيدًا.",
          "بإنشاء استعلامات SQL لتحسين الأداء.",
          "بتقليل عدد الطلبات واستخدام التخزين المؤقت.",
          "بتخزين بيانات الطلبات محليًا."
        ],
        answer: "بتقليل عدد الطلبات واستخدام التخزين المؤقت."
      },
      {
        question: "ما الفرق بين `.responseJSON` و`.responseDecodable` في Alamofire؟",
        options: [
          "`.responseJSON` لتحليل JSON يدويًا، `.responseDecodable` لتحليل تلقائي.",
          "`.responseDecodable` لتحليل JSON يدويًا، `.responseJSON` لتحليل تلقائي.",
          "كلاهما متماثلان في الوظيفة.",
          "`.responseJSON` يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "`.responseJSON` لتحليل JSON يدويًا، `.responseDecodable` لتحليل تلقائي."
      },
      {
        question: "كيف يمكن دمج Alamofire مع Core Data لإدارة البيانات؟",
        options: [
          "بتصميم واجهات مستخدم لعرض البيانات.",
          "بإنشاء استعلامات SQL لكل طلب.",
          "بتخزين بيانات Alamofire في قاعدة Core Data.",
          "بتطبيق أنماط CSS على البيانات."
        ],
        answer: "بتخزين بيانات Alamofire في قاعدة Core Data."
      },
      {
        question: "ما التحدي عند استخدام Alamofire مع واجهات برمجية محمية؟",
        options: [
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL للوصول إلى الواجهة.",
          "إدارة المصادقة وتحديث التوكنات تلقائيًا.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة المصادقة وتحديث التوكنات تلقائيًا."
      },
      {
        question: "كيف يمكن تحميل ملف باستخدام Alamofire؟",
        options: [
          "بإنشاء استعلامات SQL لتحميل الملفات.",
          "بتصميم واجهات مستخدم لعرض الملفات.",
          "باستخدام `.upload` مع `multipartFormData`.",
          "بتخزين الملفات في قاعدة بيانات."
        ],
        answer: "باستخدام `.upload` مع `multipartFormData`."
      },
      {
        question: "ما الغرض من RequestAdapter في Alamofire؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "تعديل الطلبات قبل إرسالها مثل إضافة Headers.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "تعديل الطلبات قبل إرسالها مثل إضافة Headers."
      },
      {
        question: "كيف يمكن إدارة Timeout في طلبات Alamofire؟",
        options: [
          "بتصميم واجهات مستخدم لإظهار أخطاء Timeout.",
          "بإنشاء استعلامات SQL لإدارة Timeout.",
          "بتعيين مهلة زمنية عبر URLSessionConfiguration.",
          "بتخزين سجلات Timeout في قاعدة بيانات."
        ],
        answer: "بتعيين مهلة زمنية عبر URLSessionConfiguration."
      },
      {
        question: "ما الفرق بين Alamofire وRetrofit من حيث الاستخدام؟",
        options: [
          "Retrofit لتطبيقات iOS، Alamofire لتطبيقات Android.",
          "Alamofire لتطبيقات iOS، Retrofit لتطبيقات Android.",
          "كلاهما متماثلان في الوظيفة.",
          "Alamofire يُستخدم لواجهات المستخدم فقط."
        ],
        answer: "Alamofire لتطبيقات iOS، Retrofit لتطبيقات Android."
      },
      {
        question: "كيف يمكن اختبار طلبات Alamofire في تطبيق iOS؟",
        options: [
          "بإنشاء استعلامات SQL لمحاكاة الطلبات.",
          "بتصميم واجهات مستخدم لاختبار الطلبات.",
          "باستخدام URLProtocol لمحاكاة الاستجابات.",
          "بتخزين بيانات الاختبار في قاعدة بيانات."
        ],
        answer: "باستخدام URLProtocol لمحاكاة الاستجابات."
      },
      {
        question: "ما التحدي عند استخدام Alamofire في تطبيقات متصلة دائمًا؟",
        options: [
          "تصميم واجهات مستخدم ديناميكية.",
          "إنشاء استعلامات SQL لكل طلب.",
          "إدارة إعادة المحاولة عند فقدان الاتصال.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "إدارة إعادة المحاولة عند فقدان الاتصال."
      },
      {
        question: "كيف يمكن تكوين Session في Alamofire؟",
        options: [
          "بتصميم واجهات مستخدم لإدارة Session.",
          "بإنشاء استعلامات SQL لتكوين Session.",
          "بإنشاء AF.Session مع تكوين مخصص.",
          "بتخزين Session في قاعدة بيانات."
        ],
        answer: "بإنشاء AF.Session مع تكوين مخصص."
      },
      {
        question: "ما الغرض من `.download` في Alamofire؟",
        options: [
          "إنشاء واجهات مستخدم ديناميكية.",
          "إدارة قواعد بيانات علائقية.",
          "تنزيل ملفات من الخادم مع إدارة التقدم.",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "تنزيل ملفات من الخادم مع إدارة التقدم."
      },
      {
        question: "كيف يمكن تحميل ملفات متعددة باستخدام Alamofire؟",
        options: [
          "بتصميم واجهات مستخدم لعرض الملفات.",
          "بإنشاء استعلامات SQL لتحميل الملفات.",
          "باستخدام `.upload` مع `multipartFormData` لقائمة ملفات.",
          "بتخزين الملفات في قاعدة بيانات."
        ],
        answer: "باستخدام `.upload` مع `multipartFormData` لقائمة ملفات."
      }
    ]
  }
]

export default function QuestionsMopileDevelopment(){
  return (
    <Questions quizData={quizData}/>
  )
}