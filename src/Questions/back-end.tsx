import React from "react";
import {
  Code,
  FileJson,
  LayoutTemplate,
  FileTerminal,
  Globe,
  Blocks,
  Puzzle,
  Type,
  Workflow,
  TestTube,
  Rocket,
  Box,
  FormInput,
  Palette,
  GitBranch,
  Server,
  Database,
  Lock,
  Network,
  CheckSquare,
  Cloud
} from "lucide-react";
import Questions from "../Components/questions";

// بيانات الأسئلة لكل مهارة
const quizData = [
  {
    title: "Node.js",
    icon: <FileTerminal className="w-5 h-5 text-green-400" />,
    questions: [
      {
        question: "ما هي Node.js؟",
        options: [
          "مكتبة JavaScript لتطوير واجهات المستخدم.",
          "بيئة تشغيل JavaScript لبناء تطبيقات الخلفية.",
          "إطار عمل لإنشاء تطبيقات الجوال.",
          "لغة برمجة جديدة مستقلة عن JavaScript."
        ],
        answer: "بيئة تشغيل JavaScript لبناء تطبيقات الخلفية."
      },
      {
        question: "ما الذي يميز محرك V8 في Node.js؟",
        options: [
          "يُستخدم لإنشاء واجهات برمجية فقط.",
          "يُترجم JavaScript إلى كود آلة لتحسين الأداء.",
          "يدير قواعد البيانات العلائقية.",
          "يُضيف أنماط CSS إلى التطبيقات."
        ],
        answer: "يُترجم JavaScript إلى كود آلة لتحسين الأداء."
      },
      {
        question: "كيف تُدار العمليات غير المتزامنة في Node.js؟",
        options: [
          "باستخدام callbacks، promises، وasync/await.",
          "باستخدام حلقات for التقليدية.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام دوال متزامنة فقط."
        ],
        answer: "باستخدام callbacks، promises، وasync/await."
      },
      {
        question: "ما هو npm في Node.js؟",
        options: [
          "مدير حزم لتثبيت المكتبات والتبعيات.",
          "أداة لإنشاء واجهات المستخدم.",
          "نظام لإدارة قواعد البيانات.",
          "إطار عمل لتطوير التطبيقات."
        ],
        answer: "مدير حزم لتثبيت المكتبات والتبعيات."
      },
      {
        question: "ما هو نموذج الحدث (event-driven) في Node.js؟",
        options: [
          "نظام يعتمد على إنشاء صفحات HTML ديناميكية.",
          "نموذج يعالج الطلبات بناءً على الأحداث لتحسين الأداء.",
          "أداة لإدارة قواعد البيانات.",
          "نظام لتخزين البيانات في الذاكرة."
        ],
        answer: "نموذج يعالج الطلبات بناءً على الأحداث لتحسين الأداء."
      },
      {
        question: "كيف يمكن إنشاء واجهة برمجية (API) باستخدام Node.js؟",
        options: [
          "باستخدام مكتبات مثل Express لإنشاء مسارات ومعالجة الطلبات.",
          "باستخدام أوامر SQL مباشرة.",
          "باستخدام واجهات المستخدم الرسومية.",
          "باستخدام CSS لتنسيق الطلبات."
        ],
        answer: "باستخدام مكتبات مثل Express لإنشاء مسارات ومعالجة الطلبات."
      },
      {
        question: "ما الغرض من وحدة fs في Node.js؟",
        options: [
          "إدارة قواعد البيانات العلائقية.",
          "إنشاء واجهات برمجية ديناميكية.",
          "التعامل مع نظام الملفات (قراءة وكتابة الملفات).",
          "تحسين أداء الرسوم المتحركة."
        ],
        answer: "التعامل مع نظام الملفات (قراءة وكتابة الملفات)."
      },
      {
        question: "كيف يمكن تصحيح الأخطاء في تطبيقات Node.js؟",
        options: [
          "باستخدام أدوات مثل Node Inspector أو console.log.",
          "باستخدام أوامر CSS مباشرة.",
          "باستخدام مكتبات واجهات المستخدم.",
          "باستخدام استعلامات SQL."
        ],
        answer: "باستخدام أدوات مثل Node Inspector أو console.log."
      },
      {
        question: "ما الفرق بين module.exports وexports في Node.js؟",
        options: [
          "module.exports هو الكائن الأساسي، بينما exports اختصار له.",
          "exports هو الكائن الأساسي، بينما module.exports اختصار له.",
          "كلاهما متماثلان تمامًا في الوظيفة.",
          "module.exports يُستخدم لإنشاء واجهات برمجية فقط."
        ],
        answer: "module.exports هو الكائن الأساسي، بينما exports اختصار له."
      },
      {
        question: "ما هي دوال الـ callback في Node.js؟",
        options: [
          "دوال تُنفذ بعد إكمال عملية غير متزامنة.",
          "دوال تُستخدم لإنشاء صفحات HTML.",
          "دوال تُحدد أنماط CSS.",
          "دوال تُدير قواعد البيانات."
        ],
        answer: "دوال تُنفذ بعد إكمال عملية غير متزامنة."
      },
      {
        question: "كيف يمكن استخدام async/await في Node.js؟",
        options: [
          "لمعالجة الدوال المتزامنة فقط.",
          "لتبسيط كتابة الكود غير المتزامن مع promises.",
          "لإنشاء واجهات برمجية ديناميكية.",
          "لإدارة قواعد البيانات العلائقية."
        ],
        answer: "لتبسيط كتابة الكود غير المتزامن مع promises."
      },
      {
        question: "ما هو Event Loop في Node.js؟",
        options: [
          "نظام لإدارة قواعد البيانات.",
          "آلية لمعالجة الأحداث والعمليات غير المتزامنة.",
          "أداة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS."
        ],
        answer: "آلية لمعالجة الأحداث والعمليات غير المتزامنة."
      },
      {
        question: "كيف يمكن إدارة التبعيات في مشروع Node.js؟",
        options: [
          "باستخدام ملف package.json وأداة npm.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام ملف package.json وأداة npm."
      },
      {
        question: "ما الغرض من وحدة http في Node.js؟",
        options: [
          "إنشاء خوادم HTTP ومعالجة الطلبات.",
          "إدارة قواعد البيانات العلائقية.",
          "تحسين أداء الرسوم المتحركة.",
          "إنشاء صفحات HTML ديناميكية."
        ],
        answer: "إنشاء خوادم HTTP ومعالجة الطلبات."
      },
      {
        question: "كيف يمكن تحسين أداء تطبيق Node.js؟",
        options: [
          "بتقليل العمليات المتزامنة وزيادة استخدام الحدث.",
          "بإضافة المزيد من أنماط CSS.",
          "باستخدام استعلامات SQL مباشرة.",
          "بتقليل استخدام npm."
        ],
        answer: "بتقليل العمليات المتزامنة وزيادة استخدام الحدث."
      },
      {
        question: "ما هي مكتبة Express في سياق Node.js؟",
        options: [
          "إطار عمل لتبسيط إنشاء واجهات برمجية وخوادم.",
          "مكتبة لإدارة قواعد البيانات.",
          "أداة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS."
        ],
        answer: "إطار عمل لتبسيط إنشاء واجهات برمجية وخوادم."
      },
      {
        question: "كيف يمكن قراءة ملف في Node.js؟",
        options: [
          "باستخدام وحدة fs مع دوال مثل readFile.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام وحدة fs مع دوال مثل readFile."
      },
      {
        question: "ما الفرق بين Promise وCallback في Node.js؟",
        options: [
          "Promise يُستخدم للعمليات المتزامنة، بينما Callback للعمليات غير المتزامنة.",
          "Promise يُبسط إدارة العمليات غير المتزامنة مقارنة بـ Callback.",
          "Callback يُستخدم لإنشاء واجهات برمجية فقط.",
          "Promise وCallback متماثلان تمامًا."
        ],
        answer: "Promise يُبسط إدارة العمليات غير المتزامنة مقارنة بـ Callback."
      },
      {
        question: "كيف يمكن إنشاء خادم بسيط في Node.js؟",
        options: [
          "باستخدام وحدة http ودالة createServer.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام وحدة http ودالة createServer."
      },
      {
        question: "ما هي فائدة مكتبات npm في Node.js؟",
        options: [
          "إضافة وظائف إضافية وتسريع التطوير.",
          "إنشاء صفحات HTML ديناميكية.",
          "إدارة قواعد البيانات العلائقية.",
          "تحسين أنماط CSS."
        ],
        answer: "إضافة وظائف إضافية وتسريع التطوير."
      }
    ]
  },
  {
    title: "Express.js",
    icon: <Server className="w-5 h-5 text-blue-400" />,
    questions: [
      {
        question: "ما هو Express.js؟",
        options: [
          "إطار عمل خفيف لبناء تطبيقات ويب وواجهات برمجية باستخدام Node.js.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لإدارة قواعد البيانات.",
          "لغة برمجة مستقلة."
        ],
        answer: "إطار عمل خفيف لبناء تطبيقات ويب وواجهات برمجية باستخدام Node.js."
      },
      {
        question: "ما الغرض من الـ middleware في Express.js؟",
        options: [
          "إنشاء صفحات HTML ديناميكية.",
          "معالجة الطلبات وإضافة وظائف إضافية قبل الرد.",
          "إدارة قواعد البيانات العلائقية.",
          "تحسين أنماط CSS."
        ],
        answer: "معالجة الطلبات وإضافة وظائف إضافية قبل الرد."
      },
      {
        question: "كيف يمكن إنشاء مسار (route) في Express.js؟",
        options: [
          "باستخدام دوال مثل app.get وapp.post.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام دوال مثل app.get وapp.post."
      },
      {
        question: "ما هي فائدة app.use في Express.js؟",
        options: [
          "تحديد أنماط CSS للتطبيق.",
          "تسجيل الـ middleware لمعالجة الطلبات.",
          "إدارة قواعد البيانات.",
          "إنشاء واجهات المستخدم."
        ],
        answer: "تسجيل الـ middleware لمعالجة الطلبات."
      },
      {
        question: "كيف يمكن معالجة الأخطاء في Express.js؟",
        options: [
          "باستخدام middleware خاص بالأخطاء مع 4 وسائط (err, req, res, next).",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام middleware خاص بالأخطاء مع 4 وسائط (err, req, res, next)."
      },
      {
        question: "ما الذي يميز نظام التوجيه (routing) في Express.js؟",
        options: [
          "إدارة قواعد البيانات العلائقية.",
          "إنشاء صفحات HTML ديناميكية.",
          "إدارة الطلبات بناءً على المسارات والأفعال (GET, POST).",
          "تحسين أنماط CSS."
        ],
        answer: "إدارة الطلبات بناءً على المسارات والأفعال (GET, POST)."
      },
      {
        question: "كيف يمكن إضافة مصادقة في Express.js؟",
        options: [
          "باستخدام مكتبات مثل JWT أو Passport.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل JWT أو Passport."
      },
      {
        question: "ما هي مكتبة body-parser في Express.js؟",
        options: [
          "مكتبة لتحليل بيانات الطلبات مثل JSON أو URL-encoded.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "مكتبة لإدارة قواعد البيانات.",
          "مكتبة لتحسين أنماط CSS."
        ],
        answer: "مكتبة لتحليل بيانات الطلبات مثل JSON أو URL-encoded."
      },
      {
        question: "كيف يمكن تحسين أداء واجهة برمجية في Express.js؟",
        options: [
          "باستخدام استعلامات SQL مباشرة.",
          "بتقليل الـ middleware غير الضروري وتحسين الاستعلامات.",
          "بإضافة المزيد من أنماط CSS.",
          "بتقليل استخدام التوجيه."
        ],
        answer: "بتقليل الـ middleware غير الضروري وتحسين الاستعلامات."
      },
      {
        question: "ما الفرق بين app.get وapp.post في Express.js؟",
        options: [
          "app.get لجلب البيانات، وapp.post لإرسال البيانات.",
          "app.get لإرسال البيانات، وapp.post لجلب البيانات.",
          "كلاهما متماثلان تمامًا.",
          "app.get يُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "app.get لجلب البيانات، وapp.post لإرسال البيانات."
      },
      {
        question: "كيف يمكن إعداد خادم Express.js؟",
        options: [
          "باستخدام مكتبات CSS.",
          "باستخدام استعلامات SQL.",
          "باستخدام express() ودالة listen.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام express() ودالة listen."
      },
      {
        question: "ما هي فائدة مكتبة cors في Express.js؟",
        options: [
          "إدارة قواعد البيانات.",
          "السماح بطلبات من مصادر مختلفة (Cross-Origin).",
          "تحسين أنماط CSS.",
          "إنشاء واجهات المستخدم."
        ],
        answer: "السماح بطلبات من مصادر مختلفة (Cross-Origin)."
      },
      {
        question: "كيف يمكن إدارة المعلمات في مسارات Express.js؟",
        options: [
          "باستخدام req.params للوصول إلى المعلمات الديناميكية.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام req.params للوصول إلى المعلمات الديناميكية."
      },
      {
        question: "ما هي Router في Express.js؟",
        options: [
          "كائن يُستخدم لتنظيم المسارات في ملفات منفصلة.",
          "مكتبة لإدارة قواعد البيانات.",
          "أداة لتحسين أنماط CSS.",
          "نظام لإنشاء واجهات المستخدم."
        ],
        answer: "كائن يُستخدم لتنظيم المسارات في ملفات منفصلة."
      },
      {
        question: "كيف يمكن إرسال استجابة JSON في Express.js؟",
        options: [
          "باستخدام res.json().",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام res.json()."
      },
      {
        question: "ما الغرض من مكتبة helmet في Express.js؟",
        options: [
          "تحسين أمان التطبيق من خلال إعداد رؤوس HTTP.",
          "إدارة قواعد البيانات.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS."
        ],
        answer: "تحسين أمان التطبيق من خلال إعداد رؤوس HTTP."
      },
      {
        question: "كيف يمكن التعامل مع الجلسات (sessions) في Express.js؟",
        options: [
          "باستخدام مكتبات مثل express-session.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل express-session."
      },
      {
        question: "ما هي فائدة مكتبة morgan في Express.js؟",
        options: [
          "تسجيل طلبات HTTP لتسهيل التصحيح.",
          "إدارة قواعد البيانات.",
          "تحسين أنماط CSS.",
          "إنشاء واجهات المستخدم."
        ],
        answer: "تسجيل طلبات HTTP لتسهيل التصحيح."
      },
      {
        question: "كيف يمكن تحميل ملفات في Express.js؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات مثل multer.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل multer."
      },
      {
        question: "ما الفرق بين res.send وres.json في Express.js؟",
        options: [
          "res.send يُرسل بيانات خام، بينما res.json يُرسل بيانات JSON.",
          "res.json يُرسل بيانات خام، بينما res.send يُرسل بيانات JSON.",
          "كلاهما متماثلان تمامًا.",
          "res.send يُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "res.send يُرسل بيانات خام، بينما res.json يُرسل بيانات JSON."
      }
    ]
  },
  {
    title: "Databases (SQL)",
    icon: <Database className="w-5 h-5 text-purple-400" />,
    questions: [
      {
        question: "ما هي قواعد البيانات العلائقية (SQL)؟",
        options: [
          "نظام لإنشاء واجهات المستخدم.",
          "نظام لتخزين وإدارة البيانات في جداول مترابطة.",
          "لغة برمجة لتطوير التطبيقات.",
          "إطار عمل لإنشاء واجهات برمجية."
        ],
        answer: "نظام لتخزين وإدارة البيانات في جداول مترابطة."
      },
      {
        question: "ما هي عمليات CRUD في قواعد البيانات؟",
        options: [
          "إنشاء، قراءة، تحديث، وحذف البيانات.",
          "إنشاء صفحات HTML ديناميكية.",
          "إدارة أنماط CSS.",
          "إنشاء واجهات المستخدم."
        ],
        answer: "إنشاء، قراءة، تحديث، وحذف البيانات."
      },
      {
        question: "ما الغرض من الـ joins في SQL؟",
        options: [
          "تحسين أنماط CSS.",
          "دمج البيانات من جداول متعددة بناءً على شروط.",
          "إنشاء واجهات المستخدم.",
          "إدارة الجلسات في التطبيقات."
        ],
        answer: "دمج البيانات من جداول متعددة بناءً على شروط."
      },
      {
        question: "ما هي الـ indexes في قواعد البيانات؟",
        options: [
          "هياكل تُسرّع البحث في الجداول.",
          "مكتبات لإنشاء واجهات المستخدم.",
          "أدوات لتحسين أنماط CSS.",
          "نظام لإدارة الجلسات."
        ],
        answer: "هياكل تُسرّع البحث في الجداول."
      },
      {
        question: "كيف يمكن كتابة استعلام SQL لجلب البيانات؟",
        options: [
          "باستخدام أمر SELECT مع شروط WHERE.",
          "باستخدام أمر INSERT مع شروط JOIN.",
          "باستخدام أمر UPDATE مع شروط GROUP BY.",
          "باستخدام أمر DELETE مع شروط ORDER BY."
        ],
        answer: "باستخدام أمر SELECT مع شروط WHERE."
      },
      {
        question: "ما هو المفتاح الأساسي (Primary Key) في SQL؟",
        options: [
          "مفتاح يُحدد سجلاً بشكل فريد في الجدول.",
          "مفتاح يُستخدم لإنشاء واجهات المستخدم.",
          "مفتاح يُحدد أنماط CSS.",
          "مفتاح يُدير الجلسات."
        ],
        answer: "مفتاح يُحدد سجلاً بشكل فريد في الجدول."
      },
      {
        question: "كيف يمكن تحسين أداء استعلامات SQL؟",
        options: [
          "بإنشاء واجهات المستخدم.",
          "باستخدام الـ indexes وتحسين شروط WHERE.",
          "بتحديد أنماط CSS.",
          "بإدارة الجلسات."
        ],
        answer: "باستخدام الـ indexes وتحسين شروط WHERE."
      },
      {
        question: "ما الفرق بين INNER JOIN وLEFT JOIN؟",
        options: [
          "INNER JOIN يُرجع السجلات المطابقة فقط، بينما LEFT JOIN يُرجع كل سجلات الجدول الأيسر.",
          "LEFT JOIN يُرجع السجلات المطابقة فقط، بينما INNER JOIN يُرجع كل سجلات الجدول الأيسر.",
          "كلاهما متماثلان تمامًا.",
          "INNER JOIN يُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "INNER JOIN يُرجع السجلات المطابقة فقط، بينما LEFT JOIN يُرجع كل سجلات الجدول الأيسر."
      },
      {
        question: "كيف يمكن إنشاء جدول في SQL؟",
        options: [
          "باستخدام أمر CREATE TABLE مع تحديد الأعمدة.",
          "باستخدام أمر SELECT مع شروط WHERE.",
          "باستخدام أمر UPDATE مع شروط JOIN.",
          "باستخدام أمر DELETE مع شروط GROUP BY."
        ],
        answer: "باستخدام أمر CREATE TABLE مع تحديد الأعمدة."
      },
      {
        question: "ما هي قاعدة البيانات MySQL؟",
        options: [
          "نظام إدارة قواعد بيانات علائقية مفتوح المصدر.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "إطار عمل لتطوير التطبيقات.",
          "نظام لتحسين أنماط CSS."
        ],
        answer: "نظام إدارة قواعد بيانات علائقية مفتوح المصدر."
      },
      {
        question: "كيف يمكن التكامل بين Node.js وقواعد بيانات SQL؟",
        options: [
          "باستخدام مكتبات مثل mysql2 أو pg.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم.",
          "باستخدام أنماط HTML."
        ],
        answer: "باستخدام مكتبات مثل mysql2 أو pg."
      },
      {
        question: "ما الغرض من أمر GROUP BY في SQL؟",
        options: [
          "تجميع السجلات بناءً على عمود معين.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تجميع السجلات بناءً على عمود معين."
      },
      {
        question: "ما هي المعاملات (Transactions) في SQL؟",
        options: [
          "مجموعة عمليات تُنفذ كوحدة واحدة.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "أداة لإدارة الجلسات."
        ],
        answer: "مجموعة عمليات تُنفذ كوحدة واحدة."
      },
      {
        question: "كيف يمكن حذف سجل في SQL؟",
        options: [
          "باستخدام أمر DELETE مع شرط WHERE.",
          "باستخدام أمر SELECT مع شروط JOIN.",
          "باستخدام أمر UPDATE مع شروط GROUP BY.",
          "باستخدام أمر CREATE مع شروط ORDER BY."
        ],
        answer: "باستخدام أمر DELETE مع شرط WHERE."
      },
      {
        question: "ما الفرق بين المفتاح الأساسي والمفتاح الأجنبي؟",
        options: [
          "المفتاح الأساسي يُحدد سجلاً فريدًا، والمفتاح الأجنبي يربط بين الجداول.",
          "المفتاح الأجنبي يُحدد سجلاً فريدًا، والمفتاح الأساسي يربط بين الجداول.",
          "كلاهما متماثلان تمامًا.",
          "المفتاح الأساسي يُستخدم لإنشاء واجهات المستخدم."
        ],
        answer: "المفتاح الأساسي يُحدد سجلاً فريدًا، والمفتاح الأجنبي يربط بين الجداول."
      },
      {
        question: "ما هي فائدة أمر ORDER BY في SQL؟",
        options: [
          "ترتيب السجلات بناءً على عمود معين.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "ترتيب السجلات بناءً على عمود معين."
      },
      {
        question: "كيف يمكن تحديث سجل في SQL؟",
        options: [
          "باستخدام أمر UPDATE مع شرط WHERE.",
          "باستخدام أمر SELECT مع شروط JOIN.",
          "باستخدام أمر DELETE مع شروط GROUP BY.",
          "باستخدام أمر CREATE مع شروط ORDER BY."
        ],
        answer: "باستخدام أمر UPDATE مع شرط WHERE."
      },
      {
        question: "ما هي قاعدة البيانات PostgreSQL؟",
        options: [
          "نظام إدارة قواعد بيانات علائقية متقدم.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "إطار عمل لتطوير التطبيقات.",
          "نظام لتحسين أنماط CSS."
        ],
        answer: "نظام إدارة قواعد بيانات علائقية متقدم."
      },
      {
        question: "ما الغرض من أمر HAVING في SQL؟",
        options: [
          "تصفية التجميعات بعد GROUP BY.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تصفية التجميعات بعد GROUP BY."
      },
      {
        question: "كيف يمكن إدراج سجل في SQL؟",
        options: [
          "باستخدام أمر INSERT مع قيم الأعمدة.",
          "باستخدام أمر SELECT مع شروط JOIN.",
          "باستخدام أمر UPDATE مع شروط GROUP BY.",
          "باستخدام أمر DELETE مع شروط ORDER BY."
        ],
        answer: "باستخدام أمر INSERT مع قيم الأعمدة."
      }
    ]
  },
  {
    title: "MongoDB",
    icon: <Database className="w-5 h-5 text-green-400" />,
    questions: [
      {
        question: "ما هي MongoDB؟",
        options: [
          "قاعدة بيانات NoSQL تُخزن البيانات بتنسيق JSON.",
          "نظام لإنشاء واجهات المستخدم.",
          "إطار عمل لتطوير التطبيقات.",
          "لغة برمجة مستقلة."
        ],
        answer: "قاعدة بيانات NoSQL تُخزن البيانات بتنسيق JSON."
      },
      {
        question: "ما الفرق بين قواعد بيانات SQL وNoSQL؟",
        options: [
          "SQL تستخدم جداول مترابطة، بينما NoSQL مرنة وتدعم تنسيقات مثل JSON.",
          "NoSQL تستخدم جداول مترابطة، بينما SQL مرنة وتدعم JSON.",
          "كلاهما متماثلان تمامًا.",
          "SQL تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "SQL تستخدم جداول مترابطة، بينما NoSQL مرنة وتدعم تنسيقات مثل JSON."
      },
      {
        question: "ما هو المستند (document) في MongoDB؟",
        options: [
          "وحدة تخزين بيانات بتنسيق JSON أو BSON.",
          "جدول يحتوي على أعمدة وصفوف.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS."
        ],
        answer: "وحدة تخزين بيانات بتنسيق JSON أو BSON."
      },
      {
        question: "كيف يمكن إنشاء مجموعة (collection) في MongoDB؟",
        options: [
          "باستخدام أمر db.createCollection().",
          "باستخدام أمر CREATE TABLE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أمر db.createCollection()."
      },
      {
        question: "ما هي عمليات CRUD في MongoDB؟",
        options: [
          "إنشاء، قراءة، تحديث، وحذف المستندات.",
          "إنشاء صفحات HTML ديناميكية.",
          "إدارة أنماط CSS.",
          "إنشاء واجهات المستخدم."
        ],
        answer: "إنشاء، قراءة، تحديث، وحذف المستندات."
      },
      {
        question: "كيف يمكن إدراج مستند في MongoDB؟",
        options: [
          "باستخدام أمر db.collection.insertOne() أو insertMany().",
          "باستخدام أمر INSERT مع شروط JOIN.",
          "باستخدام أمر UPDATE مع شروط GROUP BY.",
          "باستخدام أمر DELETE مع شروط ORDER BY."
        ],
        answer: "باستخدام أمر db.collection.insertOne() أو insertMany()."
      },
      {
        question: "ما الغرض من الـ aggregation pipelines في MongoDB؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تحليل ومعالجة البيانات المعقدة عبر مراحل متعددة.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تحليل ومعالجة البيانات المعقدة عبر مراحل متعددة."
      },
      {
        question: "كيف يمكن البحث عن مستند في MongoDB؟",
        options: [
          "باستخدام أمر db.collection.find().",
          "باستخدام أمر SELECT مع شروط WHERE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أمر db.collection.find()."
      },
      {
        question: "ما هي مكتبة Mongoose في سياق MongoDB؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "مكتبة لتبسيط التفاعل مع MongoDB باستخدام JavaScript.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات العلائقية."
        ],
        answer: "مكتبة لتبسيط التفاعل مع MongoDB باستخدام JavaScript."
      },
      {
        question: "كيف يمكن تحديث مستند في MongoDB؟",
        options: [
          "باستخدام أمر db.collection.updateOne() أو updateMany().",
          "باستخدام أمر INSERT مع شروط JOIN.",
          "باستخدام أمر DELETE مع شروط GROUP BY.",
          "باستخدام أمر CREATE مع شروط ORDER BY."
        ],
        answer: "باستخدام أمر db.collection.updateOne() أو updateMany()."
      },
      {
        question: "ما الفرق بين MongoDB وMySQL؟",
        options: [
          "MongoDB تستخدم تنسيق JSON/BSON، بينما MySQL تستخدم جداول.",
          "MySQL تستخدم تنسيق JSON/BSON، بينما MongoDB تستخدم جداول.",
          "كلاهما متماثلان تمامًا.",
          "MongoDB تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "MongoDB تستخدم تنسيق JSON/BSON، بينما MySQL تستخدم جداول."
      },
      {
        question: "ما هي فائدة الـ indexes في MongoDB؟",
        options: [
          "تسريع عمليات البحث والاستعلامات.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تسريع عمليات البحث والاستعلامات."
      },
      {
        question: "كيف يمكن حذف مستند في MongoDB؟",
        options: [
          "باستخدام أمر db.collection.deleteOne() أو deleteMany().",
          "باستخدام أمر SELECT مع شروط WHERE.",
          "باستخدام أمر UPDATE مع شروط GROUP BY.",
          "باستخدام أمر CREATE مع شروط ORDER BY."
        ],
        answer: "باستخدام أمر db.collection.deleteOne() أو deleteMany()."
      },
      {
        question: "ما هو التوسع الأفقي (horizontal scaling) في MongoDB؟",
        options: [
          "إضافة المزيد من الخوادم لتوزيع البيانات.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "إضافة المزيد من الخوادم لتوزيع البيانات."
      },
      {
        question: "كيف يمكن التكامل بين MongoDB وNode.js؟",
        options: [
          "باستخدام مكتبات مثل mongoose أو mongodb.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم.",
          "باستخدام أنماط HTML."
        ],
        answer: "باستخدام مكتبات مثل mongoose أو mongodb."
      },
      {
        question: "ما الغرض من أمر $match في aggregation pipeline؟",
        options: [
          "تصفية المستندات بناءً على شروط معينة.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تصفية المستندات بناءً على شروط معينة."
      },
      {
        question: "ما هي فائدة أمر $group في MongoDB؟",
        options: [
          "تجميع المستندات بناءً على حقل معين.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تجميع المستندات بناءً على حقل معين."
      },
      {
        question: "كيف يمكن تحسين أداء استعلامات MongoDB؟",
        options: [
          "باستخدام الـ indexes وتحسين تصميم المخططات.",
          "بإنشاء واجهات المستخدم.",
          "بتحديد أنماط CSS.",
          "بإدارة الجلسات."
        ],
        answer: "باستخدام الـ indexes وتحسين تصميم المخططات."
      },
      {
        question: "ما هي فائدة مكتبة mongoose في MongoDB؟",
        options: [
          "توفير هيكلية للمستندات وتبسيط الاستعلامات.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "توفير هيكلية للمستندات وتبسيط الاستعلامات."
      },
      {
        question: "ما هي عملية الـ sharding في MongoDB؟",
        options: [
          "تقسيم البيانات عبر خوادم متعددة لتحسين الأداء.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تقسيم البيانات عبر خوادم متعددة لتحسين الأداء."
      }
    ]
  },
  {
    title: "ORM (Prisma/TypeORM)",
    icon: <Database className="w-5 h-5 text-blue-400" />,
    questions: [
      {
        question: "ما هو ORM؟",
        options: [
          "نظام لإنشاء واجهات المستخدم.",
          "أداة لتبسيط التفاعل مع قواعد البيانات باستخدام كائنات.",
          "لغة برمجة مستقلة.",
          "إطار عمل لتحسين أنماط CSS."
        ],
        answer: "أداة لتبسيط التفاعل مع قواعد البيانات باستخدام كائنات."
      },
      {
        question: "ما هي مكتبة Prisma؟",
        options: [
          "مكتبة ORM لإدارة قواعد البيانات باستخدام TypeScript.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإنشاء واجهات برمجية."
        ],
        answer: "مكتبة ORM لإدارة قواعد البيانات باستخدام TypeScript."
      },
      {
        question: "ما هي مكتبة TypeORM؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "مكتبة ORM للتفاعل مع قواعد البيانات باستخدام JavaScript/TypeScript.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة الجلسات."
        ],
        answer: "مكتبة ORM للتفاعل مع قواعد البيانات باستخدام JavaScript/TypeScript."
      },
      {
        question: "كيف يمكن تعريف نموذج (model) في Prisma؟",
        options: [
          "باستخدام ملف schema.prisma لتحديد الهيكلية.",
          "باستخدام أمر CREATE TABLE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام ملف schema.prisma لتحديد الهيكلية."
      },
      {
        question: "ما الغرض من عمليات CRUD في ORM؟",
        options: [
          "إنشاء، قراءة، تحديث، وحذف البيانات باستخدام كائنات.",
          "إنشاء صفحات HTML ديناميكية.",
          "إدارة أنماط CSS.",
          "إنشاء واجهات المستخدم."
        ],
        answer: "إنشاء، قراءة، تحديث، وحذف البيانات باستخدام كائنات."
      },
      {
        question: "كيف يمكن إدارة العلاقات في TypeORM؟",
        options: [
          "باستخدام decorators مثل @OneToMany و@ManyToOne.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام decorators مثل @OneToMany و@ManyToOne."
      },
      {
        question: "ما هي فائدة ملف schema.prisma في Prisma؟",
        options: [
          "تحديد هيكلية قاعدة البيانات وإنشاء العميل (client).",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تحديد هيكلية قاعدة البيانات وإنشاء العميل (client)."
      },
      {
        question: "كيف يمكن تنفيذ استعلام في Prisma؟",
        options: [
          "باستخدام العميل مثل prisma.user.findMany().",
          "باستخدام أمر SELECT مع شروط WHERE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام العميل مثل prisma.user.findMany()."
      },
      {
        question: "ما الفرق بين Prisma وTypeORM؟",
        options: [
          "Prisma يعتمد على ملف schema، بينما TypeORM يعتمد على decorators.",
          "TypeORM يعتمد على ملف schema، بينما Prisma يعتمد على decorators.",
          "كلاهما متماثلان تمامًا.",
          "Prisma تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "Prisma يعتمد على ملف schema، بينما TypeORM يعتمد على decorators."
      },
      {
        question: "كيف يمكن تحسين أداء استعلامات ORM؟",
        options: [
          "باستخدام التحميل المسبق (eager loading) وتحسين الاستعلامات.",
          "بإنشاء واجهات المستخدم.",
          "بتحديد أنماط CSS.",
          "بإدارة الجلسات."
        ],
        answer: "باستخدام التحميل المسبق (eager loading) وتحسين الاستعلامات."
      },
      {
        question: "كيف يمكن إجراء هجرة (migration) في Prisma؟",
        options: [
          "باستخدام أمر prisma migrate dev.",
          "باستخدام أمر CREATE TABLE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أمر prisma migrate dev."
      },
      {
        question: "ما هي العلاقات في قواعد البيانات باستخدام ORM؟",
        options: [
          "علاقات مثل one-to-many وmany-to-many بين الكائنات.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "علاقات مثل one-to-many وmany-to-many بين الكائنات."
      },
      {
        question: "كيف يمكن التكامل بين Prisma وNode.js؟",
        options: [
          "باستخدام العميل Prisma في كود Node.js.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم.",
          "باستخدام أنماط HTML."
        ],
        answer: "باستخدام العميل Prisma في كود Node.js."
      },
      {
        question: "ما هي فائدة TypeScript مع TypeORM؟",
        options: [
          "توفير أنواع ثابتة لتقليل الأخطاء.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "توفير أنواع ثابتة لتقليل الأخطاء."
      },
      {
        question: "كيف يمكن إنشاء نموذج في TypeORM؟",
        options: [
          "باستخدام decorators مثل @Entity و@Column.",
          "باستخدام أمر CREATE TABLE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام decorators مثل @Entity و@Column."
      },
      {
        question: "ما الغرض من أداة Prisma CLI؟",
        options: [
          "إدارة المخططات والهجرات في Prisma.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "إدارة المخططات والهجرات في Prisma."
      },
      {
        question: "كيف يمكن إجراء استعلام في TypeORM؟",
        options: [
          "باستخدام repository مثل getRepository().find().",
          "باستخدام أمر SELECT مع شروط WHERE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام repository مثل getRepository().find()."
      },
      {
        question: "ما هي فائدة التحميل الكسول (lazy loading) في TypeORM؟",
        options: [
          "تحميل العلاقات عند الحاجة لتقليل الاستعلامات.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تحميل العلاقات عند الحاجة لتقليل الاستعلامات."
      },
      {
        question: "كيف يمكن إدارة الهجرات في TypeORM؟",
        options: [
          "باستخدام أمر typeorm migration:generate.",
          "باستخدام أمر CREATE TABLE.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أمر typeorm migration:generate."
      },
      {
        question: "ما هي فائدة ORM في تطوير الخلفية؟",
        options: [
          "تبسيط التفاعل مع قواعد البيانات وتقليل كتابة SQL.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة الجلسات."
        ],
        answer: "تبسيط التفاعل مع قواعد البيانات وتقليل كتابة SQL."
      }
    ]
  },
  {
    title: "Authentication & Authorization",
    icon: <Lock className="w-5 h-5 text-red-300" />,
    questions: [
      {
        question: "ما الفرق بين المصادقة (Authentication) والتفويض (Authorization)؟",
        options: [
          "المصادقة تتحقق من الهوية، والتفويض يحدد الأذونات.",
          "التفويض يتحقق من الهوية، والمصادقة تحدد الأذونات.",
          "كلاهما متماثلان تمامًا.",
          "المصادقة تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "المصادقة تتحقق من الهوية، والتفويض يحدد الأذونات."
      },
      {
        question: "ما هو JWT؟",
        options: [
          "رمز JSON لتأمين الطلبات بين العميل والخادم.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "رمز JSON لتأمين الطلبات بين العميل والخادم."
      },
      {
        question: "كيف يعمل OAuth 2.0؟",
        options: [
          "يسمح بالمصادقة عبر خدمات مثل Google وFacebook.",
          "يدير قواعد البيانات العلائقية.",
          "يُنشئ واجهات المستخدم.",
          "يُحسن أنماط CSS."
        ],
        answer: "يسمح بالمصادقة عبر خدمات مثل Google وFacebook."
      },
      {
        question: "ما هي مكتبة bcrypt؟",
        options: [
          "مكتبة لتشفير كلمات المرور بأمان.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة الجلسات."
        ],
        answer: "مكتبة لتشفير كلمات المرور بأمان."
      },
      {
        question: "كيف يمكن إدارة الجلسات (sessions) في تطبيق الخلفية؟",
        options: [
          "باستخدام مكتبات مثل express-session أو JWT.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل express-session أو JWT."
      },
      {
        question: "ما الغرض من التحكم في الوصول بناءً على الأدوار؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تحديد الأذونات بناءً على دور المستخدم (مثل admin أو user).",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تحديد الأذونات بناءً على دور المستخدم (مثل admin أو user)."
      },
      {
        question: "كيف يمكن تأمين واجهة برمجية باستخدام JWT؟",
        options: [
          "بإرسال رمز JWT في رأس الطلب (header) والتحقق منه.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بإرسال رمز JWT في رأس الطلب (header) والتحقق منه."
      },
      {
        question: "ما هي مكتبة Passport في سياق Node.js؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "مكتبة لإدارة المصادقة بطرق متعددة.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "مكتبة لإدارة المصادقة بطرق متعددة."
      },
      {
        question: "كيف يمكن حماية كلمات المرور في تطبيق الخلفية؟",
        options: [
          "باستخدام تشفير مثل bcrypt أو Argon2.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام تشفير مثل bcrypt أو Argon2."
      },
      {
        question: "ما الفرق بين session-based وtoken-based authentication؟",
        options: [
          "session-based يعتمد على الخادم، بينما token-based يعتمد على العميل.",
          "token-based يعتمد على الخادم، بينما session-based يعتمد على العميل.",
          "كلاهما متماثلان تمامًا.",
          "session-based تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "session-based يعتمد على الخادم، بينما token-based يعتمد على العميل."
      },
      {
        question: "كيف يمكن تنفيذ المصادقة باستخدام OAuth 2.0؟",
        options: [
          "باستخدام مكتبات مثل passport-oauth2.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل passport-oauth2."
      },
      {
        question: "ما هي فائدة رأس Authorization في HTTP؟",
        options: [
          "إرسال بيانات المصادقة مثل رموز JWT.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إرسال بيانات المصادقة مثل رموز JWT."
      },
      {
        question: "كيف يمكن التحقق من صلاحية رمز JWT؟",
        options: [
          "باستخدام مكتبة مثل jsonwebtoken لفك الرمز والتحقق من التوقيع.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبة مثل jsonwebtoken لفك الرمز والتحقق من التوقيع."
      },
      {
        question: "ما هي فائدة refresh tokens في المصادقة؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تجديد رموز الوصول (access tokens) بدون إعادة تسجيل الدخول.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تجديد رموز الوصول (access tokens) بدون إعادة تسجيل الدخول."
      },
      {
        question: "كيف يمكن التكامل بين Node.js ونظام المصادقة؟",
        options: [
          "باستخدام مكتبات مثل passport أو jsonwebtoken.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم.",
          "باستخدام أنماط HTML."
        ],
        answer: "باستخدام مكتبات مثل passport أو jsonwebtoken."
      },
      {
        question: "ما الغرض من middleware المصادقة في Express.js؟",
        options: [
          "التحقق من هوية المستخدم قبل معالجة الطلب.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "التحقق من هوية المستخدم قبل معالجة الطلب."
      },
      {
        question: "ما هي فائدة مكتبة Auth0؟",
        options: [
          "إدارة المصادقة والتفويض بسهولة عبر خدمات سحابية.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إدارة المصادقة والتفويض بسهولة عبر خدمات سحابية."
      },
      {
        question: "كيف يمكن حماية واجهة برمجية من هجمات CSRF؟",
        options: [
          "باستخدام رموز CSRF ومكتبات مثل csurf.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام رموز CSRF ومكتبات مثل csurf."
      },
      {
        question: "ما هي فائدة تشفير كلمات المرور؟",
        options: [
          "حماية بيانات المستخدم من الوصول غير المصرح به.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "حماية بيانات المستخدم من الوصول غير المصرح به."
      },
      {
        question: "كيف يمكن تنفيذ التفويض بناءً على الأدوار في Express.js؟",
        options: [
          "باستخدام middleware للتحقق من دور المستخدم.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام middleware للتحقق من دور المستخدم."
      }
    ]
  }, 
  {
    title: "NestJS",
    icon: <Server className="w-5 h-5 text-blue-400" />,
    questions: [
      {
        question: "ما هو NestJS؟",
        options: [
          "إطار عمل Node.js لبناء تطبيقات خلفية فعالة.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "لغة برمجة مستقلة."
        ],
        answer: "إطار عمل Node.js لبناء تطبيقات خلفية فعالة."
      },
      {
        question: "ما الذي يميز NestJS؟",
        options: [
          "إنشاء صفحات HTML ديناميكية.",
          "استخدام TypeScript وهيكلية قائمة على المكونات.",
          "إدارة قواعد البيانات العلائقية.",
          "تحسين أنماط CSS."
        ],
        answer: "استخدام TypeScript وهيكلية قائمة على المكونات."
      },
      {
        question: "كيف يمكن إنشاء واجهة برمجية في NestJS؟",
        options: [
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام decorators مثل @Controller و@Get.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام decorators مثل @Controller و@Get."
      },
      {
        question: "ما هي فائدة dependency injection في NestJS؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إدارة الخدمات والمكونات بشكل فعال.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إدارة الخدمات والمكونات بشكل فعال."
      },
      {
        question: "كيف يمكن إعداد خادم NestJS؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام NestFactory.create() وapp.listen().",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام NestFactory.create() وapp.listen()."
      },
      {
        question: "ما هي المكونات (modules) في NestJS؟",
        options: [
          "مكتبات لإنشاء واجهات المستخدم.",
          "وحدات لتنظيم الكود حسب الوظائف.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "وحدات لتنظيم الكود حسب الوظائف."
      },
      {
        question: "كيف يمكن إدارة الـ middleware في NestJS؟",
        options: [
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام decorators مثل @MiddlewareConsumer.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام decorators مثل @MiddlewareConsumer."
      },
      {
        question: "ما هي فائدة TypeScript في NestJS؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "توفير أنواع ثابتة وتقليل الأخطاء.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "توفير أنواع ثابتة وتقليل الأخطاء."
      },
      {
        question: "كيف يمكن التكامل بين NestJS وقواعد البيانات؟",
        options: [
          "باستخدام مكتبات CSS.",
          "باستخدام مكتبات مثل TypeORM أو Prisma.",
          "باستخدام واجهات المستخدم.",
          "باستخدام أنماط HTML."
        ],
        answer: "باستخدام مكتبات مثل TypeORM أو Prisma."
      },
      {
        question: "ما الغرض من decorator @Injectable في NestJS؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تحديد الخدمات القابلة للحقن في المكونات.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تحديد الخدمات القابلة للحقن في المكونات."
      },
      {
        question: "كيف يمكن تنفيذ GraphQL في NestJS؟",
        options: [
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبة @nestjs/graphql.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبة @nestjs/graphql."
      },
      {
        question: "ما هي فائدة أداة Nest CLI؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إنشاء وإدارة المشاريع والمكونات بسهولة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إنشاء وإدارة المشاريع والمكونات بسهولة."
      },
      {
        question: "كيف يمكن نشر تطبيق NestJS؟",
        options: [
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام منصات مثل AWS أو Heroku.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام منصات مثل AWS أو Heroku."
      },
      {
        question: "ما الفرق بين NestJS وExpress.js؟",
        options: [
          "NestJS يوفر هيكلية أكثر تنظيمًا مع TypeScript، بينما Express أخف.",
          "Express يوفر هيكلية أكثر تنظيمًا مع TypeScript، بينما NestJS أخف.",
          "كلاهما متماثلان تمامًا.",
          "NestJS تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "NestJS يوفر هيكلية أكثر تنظيمًا مع TypeScript، بينما Express أخف."
      },
      {
        question: "كيف يمكن معالجة الأخطاء في NestJS؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام exception filters مثل @Catch.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام exception filters مثل @Catch."
      },
      {
        question: "ما هي فائدة pipes في NestJS؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تحويل البيانات والتحقق من صحتها قبل المعالجة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تحويل البيانات والتحقق من صحتها قبل المعالجة."
      },
      {
        question: "كيف يمكن إضافة المصادقة في NestJS؟",
        options: [
          "باستخدام مكتبات مثل @nestjs/passport.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل @nestjs/passport."
      },
      {
        question: "ما الغرض من decorator @Module في NestJS؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تجميع المكونات والخدمات في وحدة واحدة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تجميع المكونات والخدمات في وحدة واحدة."
      },
      {
        question: "كيف يمكن تنفيذ WebSocket في NestJS؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبة @nestjs/websockets.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبة @nestjs/websockets."
      },
      {
        question: "ما هي فائدة guards في NestJS؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "السماح أو منع الوصول بناءً على شروط.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "السماح أو منع الوصول بناءً على شروط."
      }
    ]
  },
  {
    title: "GraphQL Basics",
    icon: <Network className="w-5 h-5 text-purple-400" />,
    questions: [
      {
        question: "ما هو GraphQL؟",
        options: [
          "لغة استعلامات للواجهات البرمجية تتيح جلب البيانات بدقة.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "لغة استعلامات للواجهات البرمجية تتيح جلب البيانات بدقة."
      },
      {
        question: "ما الفرق بين GraphQL وREST؟",
        options: [
          "GraphQL يتيح جلب البيانات المطلوبة فقط، بينما REST قد يُرجع بيانات زائدة.",
          "REST يتيح جلب البيانات المطلوبة فقط، بينما GraphQL يُرجع بيانات زائدة.",
          "كلاهما متماثلان تمامًا.",
          "GraphQL تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "GraphQL يتيح جلب البيانات المطلوبة فقط، بينما REST قد يُرجع بيانات زائدة."
      },
      {
        question: "ما هي المخططات (schemas) في GraphQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تعريف هيكلية البيانات والاستعلامات المتاحة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تعريف هيكلية البيانات والاستعلامات المتاحة."
      },
      {
        question: "ما هي الاستعلامات (queries) في GraphQL؟",
        options: [
          "طلبات لجلب البيانات من الخادم.",
          "مكتبات لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "طلبات لجلب البيانات من الخادم."
      },
      {
        question: "ما هي التحويلات (mutations) في GraphQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "طلبات لتعديل البيانات على الخادم.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "طلبات لتعديل البيانات على الخادم."
      },
      {
        question: "كيف يمكن تنفيذ GraphQL في Node.js؟",
        options: [
          "باستخدام مكتبات مثل apollo-server أو @nestjs/graphql.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل apollo-server أو @nestjs/graphql."
      },
      {
        question: "ما هي فائدة resolvers في GraphQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "معالجة الاستعلامات وإرجاع البيانات.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "معالجة الاستعلامات وإرجاع البيانات."
      },
      {
        question: "ما هي الاشتراكات (subscriptions) في GraphQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تلقي تحديثات في الوقت الفعلي عبر WebSocket.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تلقي تحديثات في الوقت الفعلي عبر WebSocket."
      },
      {
        question: "كيف يمكن تعريف نوع (type) في GraphQL؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام كلمة type في المخطط.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام كلمة type في المخطط."
      },
      {
        question: "ما هي فائدة أداة Apollo Server؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إنشاء خادم GraphQL بسهولة في Node.js.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إنشاء خادم GraphQL بسهولة في Node.js."
      },
      {
        question: "كيف يمكن التحقق من صحة الاستعلامات في GraphQL؟",
        options: [
          "باستخدام المخطط للتحقق من هيكلية الطلب.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام المخطط للتحقق من هيكلية الطلب."
      },
      {
        question: "ما هي فائدة GraphiQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "اختبار استعلامات GraphQL بسهولة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "اختبار استعلامات GraphQL بسهولة."
      },
      {
        question: "كيف يمكن إدارة العلاقات في GraphQL؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام أنواع مترابطة في المخطط.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أنواع مترابطة في المخطط."
      },
      {
        question: "ما الفرق بين query وmutation في GraphQL؟",
        options: [
          "query لجلب البيانات، وmutation لتعديل البيانات.",
          "mutation لجلب البيانات، وquery لتعديل البيانات.",
          "كلاهما متماثلان تمامًا.",
          "query تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "query لجلب البيانات، وmutation لتعديل البيانات."
      },
      {
        question: "كيف يمكن تحسين أداء استعلامات GraphQL؟",
        options: [
          "باستخدام استعلامات SQL.",
          "بتقليل العمق واستخدام الـ dataloader.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بتقليل العمق واستخدام الـ dataloader."
      },
      {
        question: "ما هي فائدة مكتبة dataloader في GraphQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تقليل عدد الاستعلامات عبر التجميع (batching).",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تقليل عدد الاستعلامات عبر التجميع (batching)."
      },
      {
        question: "كيف يمكن إضافة المصادقة في GraphQL؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام middleware أو resolvers للتحقق من الرموز.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام middleware أو resolvers للتحقق من الرموز."
      },
      {
        question: "ما هي فائدة fragments في GraphQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إعادة استخدام أجزاء من الاستعلامات.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إعادة استخدام أجزاء من الاستعلامات."
      },
      {
        question: "كيف يمكن اختبار واجهة GraphQL؟",
        options: [
          "باستخدام أدوات مثل Postman أو GraphiQL.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أدوات مثل Postman أو GraphiQL."
      },
      {
        question: "ما هي فائدة directives في GraphQL؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تخصيص سلوك الاستعلامات (مثل @include).",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تخصيص سلوك الاستعلامات (مثل @include)."
      }
    ]
  },
  {
    title: "Unit & Integration Testing",
    icon: <CheckSquare className="w-5 h-5 text-green-400" />,
    questions: [
      {
        question: "ما هو الاختبار الوحدي (Unit Testing)؟",
        options: [
          "اختبار وحدات صغيرة من الكود بشكل منفصل.",
          "اختبار التطبيق بالكامل في بيئة إنتاج.",
          "إنشاء واجهات المستخدم.",
          "تحسين أنماط CSS."
        ],
        answer: "اختبار وحدات صغيرة من الكود بشكل منفصل."
      },
      {
        question: "ما هو الاختبار التكاملي (Integration Testing)؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "اختبار تفاعل المكونات مع بعضها.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "اختبار تفاعل المكونات مع بعضها."
      },
      {
        question: "ما هي مكتبة Jest؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "مكتبة لاختبار JavaScript وNode.js.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "مكتبة لاختبار JavaScript وNode.js."
      },
      {
        question: "كيف يمكن كتابة اختبار وحدي باستخدام Jest؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام دوال مثل test() وexpect().",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام دوال مثل test() وexpect()."
      },
      {
        question: "ما هي فائدة mocks في الاختبارات؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "محاكاة سلوك التبعيات الخارجية.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "محاكاة سلوك التبعيات الخارجية."
      },
      {
        question: "كيف يمكن اختبار واجهة برمجية في Node.js؟",
        options: [
          "باستخدام مكتبات مثل supertest.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل supertest."
      },
      {
        question: "ما هي مكتبة Mocha؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "إطار عمل لاختبار JavaScript.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "إطار عمل لاختبار JavaScript."
      },
      {
        question: "ما الفرق بين unit testing وintegration testing؟",
        options: [
          "unit يختبر وحدات منفصلة، بينما integration يختبر التفاعل بين المكونات.",
          "integration يختبر وحدات منفصلة، بينما unit يختبر التفاعل بين المكونات.",
          "كلاهما متماثلان تمامًا.",
          "unit تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "unit يختبر وحدات منفصلة، بينما integration يختبر التفاعل بين المكونات."
      },
      {
        question: "كيف يمكن تحسين تغطية الاختبارات؟",
        options: [
          "باستخدام استعلامات SQL.",
          "بكتابة اختبارات لكل الحالات الممكنة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بكتابة اختبارات لكل الحالات الممكنة."
      },
      {
        question: "ما هي فائدة أداة Istanbul؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "قياس تغطية الاختبارات في JavaScript.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "قياس تغطية الاختبارات في JavaScript."
      },
      {
        question: "كيف يمكن اختبار دوال غير متزامنة في Jest؟",
        options: [
          "باستخدام async/await أو .resolves.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام async/await أو .resolves."
      },
      {
        question: "ما هي فائدة spies في Jest؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تتبع استدعاء الدوال ومدخلاتها.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تتبع استدعاء الدوال ومدخلاتها."
      },
      {
        question: "كيف يمكن اختبار قاعدة بيانات في تطبيق Node.js؟",
        options: [
          "باستخدام قاعدة بيانات وهمية أو in-memory.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام قاعدة بيانات وهمية أو in-memory."
      },
      {
        question: "ما هي مكتبة Chai؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "مكتبة للتأكيدات (assertions) في الاختبارات.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "مكتبة للتأكيدات (assertions) في الاختبارات."
      },
      {
        question: "كيف يمكن إعداد بيئة اختبار في Jest؟",
        options: [
          "باستخدام ملف setupFilesAfterEnv.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام ملف setupFilesAfterEnv."
      },
      {
        question: "ما هي فائدة test suites في Jest؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تنظيم الاختبارات في مجموعات ذات صلة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تنظيم الاختبارات في مجموعات ذات صلة."
      },
      {
        question: "كيف يمكن اختبار middleware في Express.js؟",
        options: [
          "باستخدام استعلامات SQL.",
          "باستخدام supertest مع mock requests.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام supertest مع mock requests."
      },
      {
        question: "ما هي فائدة code coverage؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "قياس نسبة الكود المختبر.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "قياس نسبة الكود المختبر."
      },
      {
        question: "كيف يمكن اختبار GraphQL في Node.js؟",
        options: [
          "باستخدام أدوات مثل apollo-server-testing.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أدوات مثل apollo-server-testing."
      },
      {
        question: "ما هي فائدة snapshot testing في Jest؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "التقاط حالة الكود والتحقق من التغييرات.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "التقاط حالة الكود والتحقق من التغييرات."
      }
    ]
  },
  {
    title: "CI/CD + Hosting",
    icon: <Cloud className="w-5 h-5 text-blue-400" />,
    questions: [
      {
        question: "ما هو CI/CD؟",
        options: [
          "عمليات التكامل والتسليم المستمر لتطوير البرمجيات.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "عمليات التكامل والتسليم المستمر لتطوير البرمجيات."
      },
      {
        question: "ما هو التكامل المستمر (CI)?",
        options: [
          "إنشاء واجهات المستخدم.",
          "دمج التغييرات في الكود واختبارها تلقائيًا.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "دمج التغييرات في الكود واختبارها تلقائيًا."
      },
      {
        question: "ما هو التسليم المستمر (CD)?",
        options: [
          "نشر التطبيق تلقائيًا بعد اجتياز الاختبارات.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "نشر التطبيق تلقائيًا بعد اجتياز الاختبارات."
      },
      {
        question: "ما هي أداة GitHub Actions؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "أداة لإعداد خطوط CI/CD في GitHub.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "أداة لإعداد خطوط CI/CD في GitHub."
      },
      {
        question: "كيف يمكن إعداد خط CI/CD باستخدام GitHub Actions؟",
        options: [
          "باستخدام استعلامات SQL.",
          "بإنشاء ملف YAML في مجلد .github/workflows.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بإنشاء ملف YAML في مجلد .github/workflows."
      },
      {
        question: "ما هي منصة Heroku؟",
        options: [
          "منصة لنشر واستضافة التطبيقات.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "منصة لنشر واستضافة التطبيقات."
      },
      {
        question: "ما هي فائدة Docker في CI/CD؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "توفير بيئات متماثلة عبر مراحل التطوير والنشر.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "توفير بيئات متماثلة عبر مراحل التطوير والنشر."
      },
      {
        question: "كيف يمكن نشر تطبيق Node.js على AWS؟",
        options: [
          "باستخدام خدمات مثل AWS Elastic Beanstalk أو Lambda.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام خدمات AWS Elastic Beanstalk أو Lambda."
      },
      {
        question: "ما هي أداة Jenkins؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "خادم أتمتة لإعداد خطوط CI/CD.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "خادم أتمتة لإعداد خطوط CI/CD."
      },
      {
        question: "ما الفرق بين التسليم المستمر والنشر المستمر؟",
        options: [
          "التسليم يتطلب موافقة يدوية، بينما النشر تلقائي بالكامل.",
          "النشر يتطلب موافقة يدوية، بينما التسليم تلقائي.",
          "كلاهما متماثلان تمامًا.",
          "التسليم تُستخدم لإنشاء واجهات المستخدم."
        ],
        answer: "التسليم يتطلب موافقة يدوية، بينما النشر تلقائي بالكامل."
      },
      {
        question: "كيف يمكن إعداد اختبارات في خط CI/CD؟",
        options: [
          "باستخدام أدوات مثل Jest أو Mocha في الـ pipeline.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أدوات مثل Jest أو Mocha."
      },
      {
        question: "ما هي فائدة Kubernetes في CI/CD؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إدارة الحاويات وتوسيع التطبيقات.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إدارة الحاويات وتوسيع التطبيقات."
      },
      {
        question: "كيف يمكن مراقبة تطبيق بعد النشر؟",
        options: [
          "باستخدام أدوات مثل Prometheus أو CloudWatch.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أدوات مثل Prometheus أو CloudWatch."
      },
      {
        question: "ما هي منصة Vercel؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "منصة لنشر واستضافة تطبيقات الويب.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "منصة لنشر واستضافة تطبيقات الويب."
      },
      {
        question: "كيف يمكن تحسين خطأ CI/CD؟",
        options: [
          "باستخدام استعلامات SQL.",
          "بتحليل السجلات وتقليل وقت التنفيذ.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بتحليل السجلات وتقليل وقت التنفيذ."
      },
      {
        question: "ما هي فائدة GitLab CI/CD؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إعداد خطوط CI/CD مدمجة مع GitLab.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إعداد خطوط CI/CD مدمجة مع GitLab."
      },
      {
        question: "كيف يمكن إعداد Docker في خط CI/CD؟",
        options: [
          "بإنشاء Dockerfile واستخدامه في الـ pipeline.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بإنشاء Dockerfile واستخدامه."
      },
      {
        question: "ما هي فائدة الـ Blue-Green Deployment؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تقليل وقت التوقف أثناء النشر.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تقليل وقت التوقف أثناء النشر."
      },
      {
        question: "كيف يمكن إعداد تطبيق Node.js على Heroku؟",
        options: [
          "باستخدام استعلامات SQL.",
          "بإنشاء Procfile ونشر عبر git push.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بإنشاء Procfile ونشر عبر git push."
      },
      {
        question: "ما هي فائدة Canary Releases؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "نشر التغييرات تدريجيًا لتقليل المخاطر.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "نشر التغييرات تدريجيًا لتقليل المخاطر."
      }
    ]
  },
  {
    title: "WebSocket",
    icon: <Network className="w-5 h-5 text-green-400" />,
    questions: [
      {
        question: "ما هو WebSocket؟",
        options: [
          "بروتوكول للتواصل ثنائي الاتجاه في الوقت الفعلي.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "بروتوكول للتواصل ثنائي الاتجاه في الوقت الفعلي."
      },
      {
        question: "ما الفرق بين WebSocket وHTTP؟",
        options: [
          "WebSocket يدعم التواصل المستمر، بينما HTTP يعتمد على طلب/استجابة.",
          "HTTP يدعم التواصل المستمر، بينما WebSocket يعتمد على طلب/استجابة.",
          "كلاهما متماثلان تمامًا.",
          "WebSocket تُستخدم لإنشاء واجهات المستخدم."
        ],
        answer: "WebSocket يدعم التواصل المستمر، بينما HTTP يعتمد على طلب/استجابة."
      },
      {
        question: "كيف يمكن تنفيذ WebSocket في Node.js؟",
        options: [
          "باستخدام مكتبات مثل ws أو socket.io.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبات مثل ws أو socket.io."
      },
      {
        question: "ما هي مكتبة socket.io؟",
        options: [
          "مكتبة لإنشاء واجهات المستخدم.",
          "مكتبة لتسهيل WebSocket مع دعم الرجوع إلى HTTP.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "مكتبة لتسهيل WebSocket مع دعم الرجوع إلى HTTP."
      },
      {
        question: "ما هي فائدة WebSocket في التطبيقات؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تمكين التحديثات في الوقت الفعلي مثل الدردشة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تمكين التحديثات في الوقت الفعلي مثل الدردشة."
      },
      {
        question: "كيف يمكن التعامل مع إعادة الاتصال في WebSocket؟",
        options: [
          "باستخدام آليات إعادة الاتصال في socket.io.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام آليات إعادة الاتصال في socket.io."
      },
      {
        question: "ما هي فائدة الأحداث (events) في socket.io؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إرسال واستقبال رسائل مخصصة بين العميل والخادم.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إرسال واستقبال رسائل مخصصة بين العميل والخادم."
      },
      {
        question: "كيف يمكن إدارة غرف (rooms) في socket.io؟",
        options: [
          "باستخدام دوال مثل join() و leave().",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام دوال مثل join() و leave()."
      },
      {
        question: "ما الفرق بين ws وsocket.io؟",
        options: [
          "socket.io يوفر ميزات إضافية مثل إعادة الاتصال، بينما ws أبسط.",
          "ws يوفر ميزات إضافية مثل إعادة الاتصال، بينما socket.io أبسط.",
          "كلاهما متماثلان تمامًا.",
          "ws تُستخدم لإنشاء واجهات المستخدم فقط."
        ],
        answer: "socket.io يوفر ميزات إضافية مثل إعادة الاتصال، بينما ws أبسط."
      },
      {
        question: "كيف يمكن تأمين WebSocket؟",
        options: [
          "باستخدام WSS وإضافة المصادقة.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام WSS وإضافة المصادقة."
      },
      {
        question: "ما هي فائدة WebSocket مقارنةً بـ Long Polling؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تقليل زمن الاستجابة واستهلاك الموارد.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تقليل زمن الاستجابة واستهلاك الموارد."
      },
      {
        question: "كيف يمكن اختبار WebSocket في Node.js؟",
        options: [
          "باستخدام أدوات مثل socket.io-client.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أدوات مثل socket.io-client."
      },
      {
        question: "كيف يمكن إدارة الأخطاء في WebSocket؟",
        options: [
          "باستخدام معالجات الأخطاء في socket.io.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام معالجات الأخطاء في socket.io."
      },
      {
        question: "ما هي فائدة namespaces في socket.io؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "فصل الاتصالات في قنوات مستقلة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "فصل الاتصالات في قنوات مستقلة."
      },
      {
        question: "كيف يمكن التكامل بين WebSocket وNestJS؟",
        options: [
          "باستخدام مكتبة @nestjs/websockets.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبة @nestjs/websockets."
      },
      {
        question: "ما هي فائدة heartbeat في WebSocket؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "التحقق من استمرارية الاتصال.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "التحقق من استمرارية الاتصال."
      },
      {
        question: "كيف يمكن قياس أداء WebSocket؟",
        options: [
          "باستخدام أدوات مثل wsperf.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أدوات مثل wsperf."
      },
      {
        question: "ما هي فائدة WebSocket في الدردشة؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "إرسال الرسائل فورًا بين المستخدمين.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "إرسال الرسائل فورًا بين المستخدمين."
      },
      {
        question: "كيف يمكن إدارة حجم البيانات في WebSocket؟",
        options: [
          "بتقليل حجم الرسائل وضغط البيانات.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بتقليل حجم الرسائل وضغط البيانات."
      },
      {
        question: "ما هي فائدة مكتبة ws في Node.js؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "توفير WebSocket خفيف وبسيط.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "توفير WebSocket خفيف وبسيط."
      }
    ]
  },
  {
    title: "Redis",
    icon: <Database className="w-5 h-5 text-red-600" />,
    questions: [
      {
        question: "ما هو Redis؟",
        options: [
          "قاعدة بيانات في الذاكرة لتخزين البيانات بسرعة.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات العلائقية."
        ],
        answer: "قاعدة بيانات في الذاكرة لتخزين البيانات بسرعة."
      },
      {
        question: "ما الذي يميز Redis؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "السرعة العالية ودعم هياكل بيانات متعددة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات العلائقية."
        ],
        answer: "السرعة العالية ودعم هياكل بيانات متعددة."
      },
      {
        question: "ما هي هياكل البيانات في Redis؟",
        options: [
          "السلاسل، القوائم، المجموعات، والقواميس.",
          "مكتبة لإنشاء واجهات المستخدم.",
          "نظام لتحسين أنماط CSS.",
          "إطار عمل لإدارة قواعد البيانات."
        ],
        answer: "السلاسل، القوائم، المجموعات، والقواميس."
      },
      {
        question: "كيف يمكن استخدام Redis كذاكرة تخزين مؤقت؟",
        options: [
          "بتخزين البيانات المطلوبة بشكل متكرر باستخدام SET وGET.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بتخزين البيانات المطلوبة بشكل متكرر باستخدام SET وGET."
      },
      {
        question: "ما هي فائدة Redis في التطبيقات؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تحسين الأداء عبر التخزين المؤقت والرسائل.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تحسين الأداء عبر التخزين المؤقت والرسائل."
      },
      {
        question: "كيف يمكن التكامل بين Redis وNode.js؟",
        options: [
          "باستخدام مكتبة مثل ioredis أو redis.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام مكتبة مثل ioredis أو redis."
      },
      {
        question: "ما هي أوامر SET وGET في Redis؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تخزين واسترجاع البيانات باستخدام مفتاح.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تخزين واسترجاع البيانات باستخدام مفتاح."
      },
      {
        question: "ما هي فائدة قوائم (Lists) في Redis؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تخزين البيانات بترتيب معين مثل قوائم انتظار.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تخزين البيانات بترتيب معين مثل قوائم انتظار."
      },
      {
        question: "كيف يمكن استخدام Redis لنشر الرسائل؟",
        options: [
          "باستخدام نمط pub/sub.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام نمط pub/sub."
      },
      {
        question: "ما هي فائدة المجموعات (Sets) في Redis؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تخزين عناصر فريدة مع عمليات مثل التقاطع.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تخزين عناصر فريدة مع عمليات مثل التقاطع."
      },
      {
        question: "كيف يمكن إدارة انتهاء صلاحية المفاتيح في Redis؟",
        options: [
          "باستخدام أمر EXPIRE.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أمر EXPIRE."
      },
      {
        question: "ما هي فائدة Redis Cluster؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "توزيع البيانات عبر عدة عقد لتحسين الأداء.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "توزيع البيانات عبر عدة عقد لتحسين الأداء."
      },
      {
        question: "كيف يمكن تحسين أداء Redis؟",
        options: [
          "بتقليل العمليات الثقيلة واستخدام هياكل مناسبة.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بتقليل العمليات الثقيلة واستخدام هياكل مناسبة."
      },
      {
        question: "ما هي فائدة أمر HSET في Redis؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تخزين البيانات في قاموس (hash).",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تخزين البيانات في قاموس (hash)."
      },
      {
        question: "كيف يمكن استخدام Redis لإدارة الجلسات؟",
        options: [
          "بتخزين بيانات الجلسة باستخدام مفاتيح مؤقتة.",
          "باستخدام استعلامات SQL مباشرة.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "بتخزين بيانات الجلسة باستخدام مفاتيح مؤقتة."
      },
      {
        question: "ما هي فائدة أمر ZADD في Redis؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تخزين مجموعات مرتبة بناءً على درجة.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تخزين مجموعات مرتبة بناءً على درجة."
      },
      {
        question: "كيف يمكن مراقبة Redis؟",
        options: [
          "باستخدام أدوات مثل Redis Monitor.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام أدوات مثل Redis Monitor."
      },
      {
        question: "ما هي فائدة Redis Streams؟",
        options: [
          "إنشاء واجهات المستخدم.",
          "تخزين ومعالجة تدفقات البيانات.",
          "تحسين أنماط CSS.",
          "إدارة قواعد البيانات."
        ],
        answer: "تخزين ومعالجة تدفقات البيانات."
      },
      {
        question: "كيف يمكن تأمين Redis؟",
        options: [
          "باستخدام كلمة مرور وتفعيل SSL/TLS.",
          "باستخدام استعلامات SQL.",
          "باستخدام مكتبات CSS.",
          "باستخدام واجهات المستخدم."
        ],
        answer: "باستخدام كلمة مرور وتفعيل SSL/TLS."
      },
      {
        question: "ما الفرق بين Redis وMemcached؟",
        options: [
          "Redis يدعم هياكل بيانات متعددة، بينما Memcached أبسط.",
          "Memcached يدعم هياكل بيانات متعددة، بينما Redis أبسط.",
          "كلاهما متماثلان تمامًا.",
          "Redis تُستخدم لإنشاء واجهات المستخدم."
        ],
        answer: "Redis يدعم هياكل بيانات متعددة، بينما Memcached أبسط."
      }
    ]
  }
]
export default function QuestionsBackEnd(){
  return (
    <Questions quizData={quizData}/>
  )
}